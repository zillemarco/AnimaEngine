# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AnimaEngine', [dirname(__file__)])
        except ImportError:
            import _AnimaEngine
            return _AnimaEngine
        if fp is not None:
            try:
                _mod = imp.load_module('_AnimaEngine', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _AnimaEngine = swig_import_helper()
    del swig_import_helper
else:
    import _AnimaEngine
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def __anima_get_working_dir(dest, length):
    return _AnimaEngine.__anima_get_working_dir(dest, length)
__anima_get_working_dir = _AnimaEngine.__anima_get_working_dir

def AnimaFrameDebugPush(title):
    return _AnimaEngine.AnimaFrameDebugPush(title)
AnimaFrameDebugPush = _AnimaEngine.AnimaFrameDebugPush

def AnimaFrameDebugPop():
    return _AnimaEngine.AnimaFrameDebugPop()
AnimaFrameDebugPop = _AnimaEngine.AnimaFrameDebugPop

_AnimaEngine._ANIMA_ENGINE_VERSION_MAJOR_swigconstant(_AnimaEngine)
_ANIMA_ENGINE_VERSION_MAJOR = _AnimaEngine._ANIMA_ENGINE_VERSION_MAJOR

_AnimaEngine._ANIMA_ENGINE_VERSION_MINOR_swigconstant(_AnimaEngine)
_ANIMA_ENGINE_VERSION_MINOR = _AnimaEngine._ANIMA_ENGINE_VERSION_MINOR

_AnimaEngine._ANIMA_ENGINE_VERSION_REVISION_swigconstant(_AnimaEngine)
_ANIMA_ENGINE_VERSION_REVISION = _AnimaEngine._ANIMA_ENGINE_VERSION_REVISION

_AnimaEngine._ANIMA_ENGINE_VERSION_NUMBER_swigconstant(_AnimaEngine)
_ANIMA_ENGINE_VERSION_NUMBER = _AnimaEngine._ANIMA_ENGINE_VERSION_NUMBER
class AnimaEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaEngine, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimaEngine.new_AnimaEngine()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaEngine
    __del__ = lambda self: None

    def Initialize(self):
        return _AnimaEngine.AnimaEngine_Initialize(self)

    def Terminate(self):
        return _AnimaEngine.AnimaEngine_Terminate(self)
    __swig_getmethods__["SetUsedExternal"] = lambda x: _AnimaEngine.AnimaEngine_SetUsedExternal
    if _newclass:
        SetUsedExternal = staticmethod(_AnimaEngine.AnimaEngine_SetUsedExternal)
    __swig_getmethods__["IsUsedExteral"] = lambda x: _AnimaEngine.AnimaEngine_IsUsedExteral
    if _newclass:
        IsUsedExteral = staticmethod(_AnimaEngine.AnimaEngine_IsUsedExteral)
    __swig_getmethods__["InitializeGlewExtensions"] = lambda x: _AnimaEngine.AnimaEngine_InitializeGlewExtensions
    if _newclass:
        InitializeGlewExtensions = staticmethod(_AnimaEngine.AnimaEngine_InitializeGlewExtensions)
    __swig_getmethods__["IsGlewExtensionsInitialized"] = lambda x: _AnimaEngine.AnimaEngine_IsGlewExtensionsInitialized
    if _newclass:
        IsGlewExtensionsInitialized = staticmethod(_AnimaEngine.AnimaEngine_IsGlewExtensionsInitialized)
    __swig_getmethods__["SetGlewExtensionsInitialized"] = lambda x: _AnimaEngine.AnimaEngine_SetGlewExtensionsInitialized
    if _newclass:
        SetGlewExtensionsInitialized = staticmethod(_AnimaEngine.AnimaEngine_SetGlewExtensionsInitialized)
    __swig_getmethods__["SetLogFilePath"] = lambda x: _AnimaEngine.AnimaEngine_SetLogFilePath
    if _newclass:
        SetLogFilePath = staticmethod(_AnimaEngine.AnimaEngine_SetLogFilePath)
    __swig_getmethods__["GetLogFilePath"] = lambda x: _AnimaEngine.AnimaEngine_GetLogFilePath
    if _newclass:
        GetLogFilePath = staticmethod(_AnimaEngine.AnimaEngine_GetLogFilePath)
    __swig_getmethods__["IsInitialized"] = lambda x: _AnimaEngine.AnimaEngine_IsInitialized
    if _newclass:
        IsInitialized = staticmethod(_AnimaEngine.AnimaEngine_IsInitialized)

    def DumpMemory(self, fileName, bLogToFile=True):
        return _AnimaEngine.AnimaEngine_DumpMemory(self, fileName, bLogToFile)

    def GetModelsAllocator(self):
        return _AnimaEngine.AnimaEngine_GetModelsAllocator(self)

    def GetGenericAllocator(self):
        return _AnimaEngine.AnimaEngine_GetGenericAllocator(self)

    def GetMeshesAllocator(self):
        return _AnimaEngine.AnimaEngine_GetMeshesAllocator(self)

    def GetModelInstancesAllocator(self):
        return _AnimaEngine.AnimaEngine_GetModelInstancesAllocator(self)

    def GetMeshInstancesAllocator(self):
        return _AnimaEngine.AnimaEngine_GetMeshInstancesAllocator(self)

    def GetStringAllocator(self):
        return _AnimaEngine.AnimaEngine_GetStringAllocator(self)

    def GetShadersAllocator(self):
        return _AnimaEngine.AnimaEngine_GetShadersAllocator(self)

    def GetCamerasAllocator(self):
        return _AnimaEngine.AnimaEngine_GetCamerasAllocator(self)

    def GetTexturesAllocator(self):
        return _AnimaEngine.AnimaEngine_GetTexturesAllocator(self)

    def GetMaterialsAllocator(self):
        return _AnimaEngine.AnimaEngine_GetMaterialsAllocator(self)

    def GetLightsAllocator(self):
        return _AnimaEngine.AnimaEngine_GetLightsAllocator(self)

    def GetDataGeneratorsAllocator(self):
        return _AnimaEngine.AnimaEngine_GetDataGeneratorsAllocator(self)

    def GetScenesAllocator(self):
        return _AnimaEngine.AnimaEngine_GetScenesAllocator(self)

    def GetAnimationsAllocator(self):
        return _AnimaEngine.AnimaEngine_GetAnimationsAllocator(self)

    def GetManagersAllocator(self):
        return _AnimaEngine.AnimaEngine_GetManagersAllocator(self)

    def GetShadersManager(self):
        return _AnimaEngine.AnimaEngine_GetShadersManager(self)

    def GetScenesManager(self):
        return _AnimaEngine.AnimaEngine_GetScenesManager(self)

    def GetDataGeneratorsManager(self):
        return _AnimaEngine.AnimaEngine_GetDataGeneratorsManager(self)
AnimaEngine_swigregister = _AnimaEngine.AnimaEngine_swigregister
AnimaEngine_swigregister(AnimaEngine)

def AnimaEngine_SetUsedExternal(bUsedExternal=True):
    return _AnimaEngine.AnimaEngine_SetUsedExternal(bUsedExternal)
AnimaEngine_SetUsedExternal = _AnimaEngine.AnimaEngine_SetUsedExternal

def AnimaEngine_IsUsedExteral():
    return _AnimaEngine.AnimaEngine_IsUsedExteral()
AnimaEngine_IsUsedExteral = _AnimaEngine.AnimaEngine_IsUsedExteral

def AnimaEngine_InitializeGlewExtensions():
    return _AnimaEngine.AnimaEngine_InitializeGlewExtensions()
AnimaEngine_InitializeGlewExtensions = _AnimaEngine.AnimaEngine_InitializeGlewExtensions

def AnimaEngine_IsGlewExtensionsInitialized():
    return _AnimaEngine.AnimaEngine_IsGlewExtensionsInitialized()
AnimaEngine_IsGlewExtensionsInitialized = _AnimaEngine.AnimaEngine_IsGlewExtensionsInitialized

def AnimaEngine_SetGlewExtensionsInitialized(bSet):
    return _AnimaEngine.AnimaEngine_SetGlewExtensionsInitialized(bSet)
AnimaEngine_SetGlewExtensionsInitialized = _AnimaEngine.AnimaEngine_SetGlewExtensionsInitialized

def AnimaEngine_SetLogFilePath(path):
    return _AnimaEngine.AnimaEngine_SetLogFilePath(path)
AnimaEngine_SetLogFilePath = _AnimaEngine.AnimaEngine_SetLogFilePath

def AnimaEngine_GetLogFilePath():
    return _AnimaEngine.AnimaEngine_GetLogFilePath()
AnimaEngine_GetLogFilePath = _AnimaEngine.AnimaEngine_GetLogFilePath

def AnimaEngine_IsInitialized():
    return _AnimaEngine.AnimaEngine_IsInitialized()
AnimaEngine_IsInitialized = _AnimaEngine.AnimaEngine_IsInitialized


def reportAssertionFailure(expr, fileName, line):
    return _AnimaEngine.reportAssertionFailure(expr, fileName, line)
reportAssertionFailure = _AnimaEngine.reportAssertionFailure

_AnimaEngine.ANIMAGC_OPENGL_API_swigconstant(_AnimaEngine)
ANIMAGC_OPENGL_API = _AnimaEngine.ANIMAGC_OPENGL_API

_AnimaEngine.ANIMAGC_OPENGL_ES_API_swigconstant(_AnimaEngine)
ANIMAGC_OPENGL_ES_API = _AnimaEngine.ANIMAGC_OPENGL_ES_API

_AnimaEngine.ANIMAGC_ANY_RELEASE_BEHAVIOR_swigconstant(_AnimaEngine)
ANIMAGC_ANY_RELEASE_BEHAVIOR = _AnimaEngine.ANIMAGC_ANY_RELEASE_BEHAVIOR

_AnimaEngine.ANIMAGC_RELEASE_BEHAVIOR_FLUSH_swigconstant(_AnimaEngine)
ANIMAGC_RELEASE_BEHAVIOR_FLUSH = _AnimaEngine.ANIMAGC_RELEASE_BEHAVIOR_FLUSH

_AnimaEngine.ANIMAGC_RELEASE_BEHAVIOR_NONE_swigconstant(_AnimaEngine)
ANIMAGC_RELEASE_BEHAVIOR_NONE = _AnimaEngine.ANIMAGC_RELEASE_BEHAVIOR_NONE

_AnimaEngine.ANIMAGC_NO_ROBUSTNESS_swigconstant(_AnimaEngine)
ANIMAGC_NO_ROBUSTNESS = _AnimaEngine.ANIMAGC_NO_ROBUSTNESS

_AnimaEngine.ANIMAGC_NO_RESET_NOTIFICATION_swigconstant(_AnimaEngine)
ANIMAGC_NO_RESET_NOTIFICATION = _AnimaEngine.ANIMAGC_NO_RESET_NOTIFICATION

_AnimaEngine.ANIMAGC_LOSE_CONTEXT_ON_RESET_swigconstant(_AnimaEngine)
ANIMAGC_LOSE_CONTEXT_ON_RESET = _AnimaEngine.ANIMAGC_LOSE_CONTEXT_ON_RESET

_AnimaEngine.ANIMAGC_OPENGL_ANY_PROFILE_swigconstant(_AnimaEngine)
ANIMAGC_OPENGL_ANY_PROFILE = _AnimaEngine.ANIMAGC_OPENGL_ANY_PROFILE

_AnimaEngine.ANIMAGC_OPENGL_CORE_PROFILE_swigconstant(_AnimaEngine)
ANIMAGC_OPENGL_CORE_PROFILE = _AnimaEngine.ANIMAGC_OPENGL_CORE_PROFILE

_AnimaEngine.ANIMAGC_OPENGL_COMPAT_PROFILE_swigconstant(_AnimaEngine)
ANIMAGC_OPENGL_COMPAT_PROFILE = _AnimaEngine.ANIMAGC_OPENGL_COMPAT_PROFILE

_AnimaEngine.ANIMAGC_RECREATION_NOT_NEEDED_swigconstant(_AnimaEngine)
ANIMAGC_RECREATION_NOT_NEEDED = _AnimaEngine.ANIMAGC_RECREATION_NOT_NEEDED

_AnimaEngine.ANIMAGC_RECREATION_REQUIRED_swigconstant(_AnimaEngine)
ANIMAGC_RECREATION_REQUIRED = _AnimaEngine.ANIMAGC_RECREATION_REQUIRED

_AnimaEngine.ANIMAGC_RECREATION_IMPOSSIBLE_swigconstant(_AnimaEngine)
ANIMAGC_RECREATION_IMPOSSIBLE = _AnimaEngine.ANIMAGC_RECREATION_IMPOSSIBLE
class AnimaGCFrameBufferConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaGCFrameBufferConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaGCFrameBufferConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_redBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__redBits_set
    __swig_getmethods__["_redBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__redBits_get
    if _newclass:
        _redBits = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__redBits_get, _AnimaEngine.AnimaGCFrameBufferConfig__redBits_set)
    __swig_setmethods__["_greenBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__greenBits_set
    __swig_getmethods__["_greenBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__greenBits_get
    if _newclass:
        _greenBits = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__greenBits_get, _AnimaEngine.AnimaGCFrameBufferConfig__greenBits_set)
    __swig_setmethods__["_blueBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__blueBits_set
    __swig_getmethods__["_blueBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__blueBits_get
    if _newclass:
        _blueBits = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__blueBits_get, _AnimaEngine.AnimaGCFrameBufferConfig__blueBits_set)
    __swig_setmethods__["_alphaBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__alphaBits_set
    __swig_getmethods__["_alphaBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__alphaBits_get
    if _newclass:
        _alphaBits = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__alphaBits_get, _AnimaEngine.AnimaGCFrameBufferConfig__alphaBits_set)
    __swig_setmethods__["_depthBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__depthBits_set
    __swig_getmethods__["_depthBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__depthBits_get
    if _newclass:
        _depthBits = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__depthBits_get, _AnimaEngine.AnimaGCFrameBufferConfig__depthBits_set)
    __swig_setmethods__["_stencilBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__stencilBits_set
    __swig_getmethods__["_stencilBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__stencilBits_get
    if _newclass:
        _stencilBits = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__stencilBits_get, _AnimaEngine.AnimaGCFrameBufferConfig__stencilBits_set)
    __swig_setmethods__["_accumRedBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__accumRedBits_set
    __swig_getmethods__["_accumRedBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__accumRedBits_get
    if _newclass:
        _accumRedBits = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__accumRedBits_get, _AnimaEngine.AnimaGCFrameBufferConfig__accumRedBits_set)
    __swig_setmethods__["_accumGreenBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__accumGreenBits_set
    __swig_getmethods__["_accumGreenBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__accumGreenBits_get
    if _newclass:
        _accumGreenBits = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__accumGreenBits_get, _AnimaEngine.AnimaGCFrameBufferConfig__accumGreenBits_set)
    __swig_setmethods__["_accumBlueBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__accumBlueBits_set
    __swig_getmethods__["_accumBlueBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__accumBlueBits_get
    if _newclass:
        _accumBlueBits = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__accumBlueBits_get, _AnimaEngine.AnimaGCFrameBufferConfig__accumBlueBits_set)
    __swig_setmethods__["_accumAlphaBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__accumAlphaBits_set
    __swig_getmethods__["_accumAlphaBits"] = _AnimaEngine.AnimaGCFrameBufferConfig__accumAlphaBits_get
    if _newclass:
        _accumAlphaBits = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__accumAlphaBits_get, _AnimaEngine.AnimaGCFrameBufferConfig__accumAlphaBits_set)
    __swig_setmethods__["_auxBuffers"] = _AnimaEngine.AnimaGCFrameBufferConfig__auxBuffers_set
    __swig_getmethods__["_auxBuffers"] = _AnimaEngine.AnimaGCFrameBufferConfig__auxBuffers_get
    if _newclass:
        _auxBuffers = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__auxBuffers_get, _AnimaEngine.AnimaGCFrameBufferConfig__auxBuffers_set)
    __swig_setmethods__["_stereo"] = _AnimaEngine.AnimaGCFrameBufferConfig__stereo_set
    __swig_getmethods__["_stereo"] = _AnimaEngine.AnimaGCFrameBufferConfig__stereo_get
    if _newclass:
        _stereo = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__stereo_get, _AnimaEngine.AnimaGCFrameBufferConfig__stereo_set)
    __swig_setmethods__["_samples"] = _AnimaEngine.AnimaGCFrameBufferConfig__samples_set
    __swig_getmethods__["_samples"] = _AnimaEngine.AnimaGCFrameBufferConfig__samples_get
    if _newclass:
        _samples = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__samples_get, _AnimaEngine.AnimaGCFrameBufferConfig__samples_set)
    __swig_setmethods__["_sRGB"] = _AnimaEngine.AnimaGCFrameBufferConfig__sRGB_set
    __swig_getmethods__["_sRGB"] = _AnimaEngine.AnimaGCFrameBufferConfig__sRGB_get
    if _newclass:
        _sRGB = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__sRGB_get, _AnimaEngine.AnimaGCFrameBufferConfig__sRGB_set)
    __swig_setmethods__["_doublebuffer"] = _AnimaEngine.AnimaGCFrameBufferConfig__doublebuffer_set
    __swig_getmethods__["_doublebuffer"] = _AnimaEngine.AnimaGCFrameBufferConfig__doublebuffer_get
    if _newclass:
        _doublebuffer = _swig_property(_AnimaEngine.AnimaGCFrameBufferConfig__doublebuffer_get, _AnimaEngine.AnimaGCFrameBufferConfig__doublebuffer_set)

    def __init__(self):
        this = _AnimaEngine.new_AnimaGCFrameBufferConfig()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaGCFrameBufferConfig
    __del__ = lambda self: None
AnimaGCFrameBufferConfig_swigregister = _AnimaEngine.AnimaGCFrameBufferConfig_swigregister
AnimaGCFrameBufferConfig_swigregister(AnimaGCFrameBufferConfig)

class AnimaGCContextConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaGCContextConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaGCContextConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_api"] = _AnimaEngine.AnimaGCContextConfig__api_set
    __swig_getmethods__["_api"] = _AnimaEngine.AnimaGCContextConfig__api_get
    if _newclass:
        _api = _swig_property(_AnimaEngine.AnimaGCContextConfig__api_get, _AnimaEngine.AnimaGCContextConfig__api_set)
    __swig_setmethods__["_major"] = _AnimaEngine.AnimaGCContextConfig__major_set
    __swig_getmethods__["_major"] = _AnimaEngine.AnimaGCContextConfig__major_get
    if _newclass:
        _major = _swig_property(_AnimaEngine.AnimaGCContextConfig__major_get, _AnimaEngine.AnimaGCContextConfig__major_set)
    __swig_setmethods__["_minor"] = _AnimaEngine.AnimaGCContextConfig__minor_set
    __swig_getmethods__["_minor"] = _AnimaEngine.AnimaGCContextConfig__minor_get
    if _newclass:
        _minor = _swig_property(_AnimaEngine.AnimaGCContextConfig__minor_get, _AnimaEngine.AnimaGCContextConfig__minor_set)
    __swig_setmethods__["_forward"] = _AnimaEngine.AnimaGCContextConfig__forward_set
    __swig_getmethods__["_forward"] = _AnimaEngine.AnimaGCContextConfig__forward_get
    if _newclass:
        _forward = _swig_property(_AnimaEngine.AnimaGCContextConfig__forward_get, _AnimaEngine.AnimaGCContextConfig__forward_set)
    __swig_setmethods__["_debug"] = _AnimaEngine.AnimaGCContextConfig__debug_set
    __swig_getmethods__["_debug"] = _AnimaEngine.AnimaGCContextConfig__debug_get
    if _newclass:
        _debug = _swig_property(_AnimaEngine.AnimaGCContextConfig__debug_get, _AnimaEngine.AnimaGCContextConfig__debug_set)
    __swig_setmethods__["_profile"] = _AnimaEngine.AnimaGCContextConfig__profile_set
    __swig_getmethods__["_profile"] = _AnimaEngine.AnimaGCContextConfig__profile_get
    if _newclass:
        _profile = _swig_property(_AnimaEngine.AnimaGCContextConfig__profile_get, _AnimaEngine.AnimaGCContextConfig__profile_set)
    __swig_setmethods__["_robustness"] = _AnimaEngine.AnimaGCContextConfig__robustness_set
    __swig_getmethods__["_robustness"] = _AnimaEngine.AnimaGCContextConfig__robustness_get
    if _newclass:
        _robustness = _swig_property(_AnimaEngine.AnimaGCContextConfig__robustness_get, _AnimaEngine.AnimaGCContextConfig__robustness_set)
    __swig_setmethods__["_release"] = _AnimaEngine.AnimaGCContextConfig__release_set
    __swig_getmethods__["_release"] = _AnimaEngine.AnimaGCContextConfig__release_get
    if _newclass:
        _release = _swig_property(_AnimaEngine.AnimaGCContextConfig__release_get, _AnimaEngine.AnimaGCContextConfig__release_set)

    def __init__(self):
        this = _AnimaEngine.new_AnimaGCContextConfig()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaGCContextConfig
    __del__ = lambda self: None
AnimaGCContextConfig_swigregister = _AnimaEngine.AnimaGCContextConfig_swigregister
AnimaGCContextConfig_swigregister(AnimaGCContextConfig)

class AnimaGC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaGC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaGC, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimaEngine.delete_AnimaGC
    __del__ = lambda self: None

    def MakeCurrent(self):
        return _AnimaEngine.AnimaGC_MakeCurrent(self)

    def SwapBuffers(self):
        return _AnimaEngine.AnimaGC_SwapBuffers(self)
    __swig_getmethods__["DestroyContext"] = lambda x: _AnimaEngine.AnimaGC_DestroyContext
    if _newclass:
        DestroyContext = staticmethod(_AnimaEngine.AnimaGC_DestroyContext)
    __swig_getmethods__["SetSwapInterval"] = lambda x: _AnimaEngine.AnimaGC_SetSwapInterval
    if _newclass:
        SetSwapInterval = staticmethod(_AnimaEngine.AnimaGC_SetSwapInterval)
AnimaGC_swigregister = _AnimaEngine.AnimaGC_swigregister
AnimaGC_swigregister(AnimaGC)

def AnimaGC_DestroyContext(context):
    return _AnimaEngine.AnimaGC_DestroyContext(context)
AnimaGC_DestroyContext = _AnimaEngine.AnimaGC_DestroyContext

def AnimaGC_SetSwapInterval(interval):
    return _AnimaEngine.AnimaGC_SetSwapInterval(interval)
AnimaGC_SetSwapInterval = _AnimaEngine.AnimaGC_SetSwapInterval


def alignForward(*args):
    return _AnimaEngine.alignForward(*args)
alignForward = _AnimaEngine.alignForward

def alignBackward(*args):
    return _AnimaEngine.alignBackward(*args)
alignBackward = _AnimaEngine.alignBackward

def alignForwardAdjustment(address, alignment):
    return _AnimaEngine.alignForwardAdjustment(address, alignment)
alignForwardAdjustment = _AnimaEngine.alignForwardAdjustment

def alignForwardAdjustmentWithHeader(address, alignment, headerSize):
    return _AnimaEngine.alignForwardAdjustmentWithHeader(address, alignment, headerSize)
alignForwardAdjustmentWithHeader = _AnimaEngine.alignForwardAdjustmentWithHeader

def alignBackwardAdjustment(address, alignment):
    return _AnimaEngine.alignBackwardAdjustment(address, alignment)
alignBackwardAdjustment = _AnimaEngine.alignBackwardAdjustment

def add(*args):
    return _AnimaEngine.add(*args)
add = _AnimaEngine.add

def subtract(*args):
    return _AnimaEngine.subtract(*args)
subtract = _AnimaEngine.subtract
class AnimaAllocator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaAllocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaAllocator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimaEngine.delete_AnimaAllocator
    __del__ = lambda self: None

    def Allocate(self, size, alignment=4):
        return _AnimaEngine.AnimaAllocator_Allocate(self, size, alignment)

    def Deallocate(self, p):
        return _AnimaEngine.AnimaAllocator_Deallocate(self, p)

    def GetStart(self):
        return _AnimaEngine.AnimaAllocator_GetStart(self)

    def GetSize(self):
        return _AnimaEngine.AnimaAllocator_GetSize(self)

    def GetUsedMemory(self):
        return _AnimaEngine.AnimaAllocator_GetUsedMemory(self)

    def GetNumAllocations(self):
        return _AnimaEngine.AnimaAllocator_GetNumAllocations(self)

    def GetNumArrayAllocations(self):
        return _AnimaEngine.AnimaAllocator_GetNumArrayAllocations(self)

    def AddArrayAllocation(self):
        return _AnimaEngine.AnimaAllocator_AddArrayAllocation(self)

    def SubArrayAllocation(self):
        return _AnimaEngine.AnimaAllocator_SubArrayAllocation(self)

    def Dump(self):
        return _AnimaEngine.AnimaAllocator_Dump(self)
AnimaAllocator_swigregister = _AnimaEngine.AnimaAllocator_swigregister
AnimaAllocator_swigregister(AnimaAllocator)

class AnimaStackAllocator(AnimaAllocator):
    __swig_setmethods__ = {}
    for _s in [AnimaAllocator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaStackAllocator, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaAllocator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaStackAllocator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimaEngine.delete_AnimaStackAllocator
    __del__ = lambda self: None

    def Allocate(self, size, alignment):
        return _AnimaEngine.AnimaStackAllocator_Allocate(self, size, alignment)

    def Deallocate(self, p):
        return _AnimaEngine.AnimaStackAllocator_Deallocate(self, p)
AnimaStackAllocator_swigregister = _AnimaEngine.AnimaStackAllocator_swigregister
AnimaStackAllocator_swigregister(AnimaStackAllocator)


def NewAnimaStackAllocator(size, allocator):
    return _AnimaEngine.NewAnimaStackAllocator(size, allocator)
NewAnimaStackAllocator = _AnimaEngine.NewAnimaStackAllocator

def DeleteAnimaStackAllocator(stackAllocator, allocator):
    return _AnimaEngine.DeleteAnimaStackAllocator(stackAllocator, allocator)
DeleteAnimaStackAllocator = _AnimaEngine.DeleteAnimaStackAllocator
class AnimaLinearAllocator(AnimaAllocator):
    __swig_setmethods__ = {}
    for _s in [AnimaAllocator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaLinearAllocator, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaAllocator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaLinearAllocator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimaEngine.delete_AnimaLinearAllocator
    __del__ = lambda self: None

    def Allocate(self, size, alignment):
        return _AnimaEngine.AnimaLinearAllocator_Allocate(self, size, alignment)

    def Deallocate(self, p):
        return _AnimaEngine.AnimaLinearAllocator_Deallocate(self, p)

    def Clear(self):
        return _AnimaEngine.AnimaLinearAllocator_Clear(self)
AnimaLinearAllocator_swigregister = _AnimaEngine.AnimaLinearAllocator_swigregister
AnimaLinearAllocator_swigregister(AnimaLinearAllocator)


def NewAnimaLinearAllocator(size, allocator):
    return _AnimaEngine.NewAnimaLinearAllocator(size, allocator)
NewAnimaLinearAllocator = _AnimaEngine.NewAnimaLinearAllocator

def DeleteAnimaLinearAllocator(linearAllocator, allocator):
    return _AnimaEngine.DeleteAnimaLinearAllocator(linearAllocator, allocator)
DeleteAnimaLinearAllocator = _AnimaEngine.DeleteAnimaLinearAllocator
class AnimaFreeListAllocator(AnimaAllocator):
    __swig_setmethods__ = {}
    for _s in [AnimaAllocator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaFreeListAllocator, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaAllocator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaFreeListAllocator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimaEngine.delete_AnimaFreeListAllocator
    __del__ = lambda self: None

    def Allocate(self, size, alignment):
        return _AnimaEngine.AnimaFreeListAllocator_Allocate(self, size, alignment)

    def Deallocate(self, p):
        return _AnimaEngine.AnimaFreeListAllocator_Deallocate(self, p)
AnimaFreeListAllocator_swigregister = _AnimaEngine.AnimaFreeListAllocator_swigregister
AnimaFreeListAllocator_swigregister(AnimaFreeListAllocator)


def NewAnimaFreeListAllocator(size, allocator):
    return _AnimaEngine.NewAnimaFreeListAllocator(size, allocator)
NewAnimaFreeListAllocator = _AnimaEngine.NewAnimaFreeListAllocator

def DeleteAnimaFreeListAllocator(freeListAllocator, allocator):
    return _AnimaEngine.DeleteAnimaFreeListAllocator(freeListAllocator, allocator)
DeleteAnimaFreeListAllocator = _AnimaEngine.DeleteAnimaFreeListAllocator
class AnimaPoolAllocator(AnimaAllocator):
    __swig_setmethods__ = {}
    for _s in [AnimaAllocator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaPoolAllocator, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaAllocator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaPoolAllocator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimaEngine.delete_AnimaPoolAllocator
    __del__ = lambda self: None

    def Allocate(self, size, alignment):
        return _AnimaEngine.AnimaPoolAllocator_Allocate(self, size, alignment)

    def Deallocate(self, p):
        return _AnimaEngine.AnimaPoolAllocator_Deallocate(self, p)
AnimaPoolAllocator_swigregister = _AnimaEngine.AnimaPoolAllocator_swigregister
AnimaPoolAllocator_swigregister(AnimaPoolAllocator)


def NewAnimaPoolAllocator(objectSize, objectAlignment, size, allocator):
    return _AnimaEngine.NewAnimaPoolAllocator(objectSize, objectAlignment, size, allocator)
NewAnimaPoolAllocator = _AnimaEngine.NewAnimaPoolAllocator

def DeleteAnimaPoolAllocator(poolAllocator, allocator):
    return _AnimaEngine.DeleteAnimaPoolAllocator(poolAllocator, allocator)
DeleteAnimaPoolAllocator = _AnimaEngine.DeleteAnimaPoolAllocator
class AnimaProxyAllocator(AnimaAllocator):
    __swig_setmethods__ = {}
    for _s in [AnimaAllocator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaProxyAllocator, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaAllocator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaProxyAllocator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimaEngine.delete_AnimaProxyAllocator
    __del__ = lambda self: None

    def Allocate(self, size, alignment):
        return _AnimaEngine.AnimaProxyAllocator_Allocate(self, size, alignment)

    def Deallocate(self, p):
        return _AnimaEngine.AnimaProxyAllocator_Deallocate(self, p)
AnimaProxyAllocator_swigregister = _AnimaEngine.AnimaProxyAllocator_swigregister
AnimaProxyAllocator_swigregister(AnimaProxyAllocator)


def NewAnimaProxyAllocator(allocator):
    return _AnimaEngine.NewAnimaProxyAllocator(allocator)
NewAnimaProxyAllocator = _AnimaEngine.NewAnimaProxyAllocator

def DeleteAnimaProxyAllocator(proxyAllocator, allocator):
    return _AnimaEngine.DeleteAnimaProxyAllocator(proxyAllocator, allocator)
DeleteAnimaProxyAllocator = _AnimaEngine.DeleteAnimaProxyAllocator
class AnimaString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaString(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaString
    __del__ = lambda self: None

    def __iadd__(self, *args):
        return _AnimaEngine.AnimaString___iadd__(self, *args)

    def __eq__(self, *args):
        return _AnimaEngine.AnimaString___eq__(self, *args)

    def __ne__(self, *args):
        return _AnimaEngine.AnimaString___ne__(self, *args)

    def SetString(self, str):
        return _AnimaEngine.AnimaString_SetString(self, str)

    def ClearString(self):
        return _AnimaEngine.AnimaString_ClearString(self)

    def GetConstBuffer(self):
        return _AnimaEngine.AnimaString_GetConstBuffer(self)

    def GetBuffer(self):
        return _AnimaEngine.AnimaString_GetBuffer(self)

    def GetBufferLength(self):
        return _AnimaEngine.AnimaString_GetBufferLength(self)

    def Format(self, format):
        return _AnimaEngine.AnimaString_Format(self, format)

    def Reserve(self, size):
        return _AnimaEngine.AnimaString_Reserve(self, size)

    def Find(self, *args):
        return _AnimaEngine.AnimaString_Find(self, *args)

    def CountOf(self, c):
        return _AnimaEngine.AnimaString_CountOf(self, c)

    def ReverseFind(self, *args):
        return _AnimaEngine.AnimaString_ReverseFind(self, *args)

    def Substring(self, startPos, len):
        return _AnimaEngine.AnimaString_Substring(self, startPos, len)

    def Left(self, len):
        return _AnimaEngine.AnimaString_Left(self, len)

    def Right(self, len):
        return _AnimaEngine.AnimaString_Right(self, len)

    def TrimLeft(self):
        return _AnimaEngine.AnimaString_TrimLeft(self)

    def TrimRight(self):
        return _AnimaEngine.AnimaString_TrimRight(self)

    def Trim(self):
        return _AnimaEngine.AnimaString_Trim(self)

    def Replace(self, *args):
        return _AnimaEngine.AnimaString_Replace(self, *args)

    def Compare(self, *args):
        return _AnimaEngine.AnimaString_Compare(self, *args)

    def CompareNoCase(self, *args):
        return _AnimaEngine.AnimaString_CompareNoCase(self, *args)

    def StartsWith(self, *args):
        return _AnimaEngine.AnimaString_StartsWith(self, *args)

    def IsEmpty(self):
        return _AnimaEngine.AnimaString_IsEmpty(self)

    def MakeRandom(self, *args):
        return _AnimaEngine.AnimaString_MakeRandom(self, *args)
AnimaString_swigregister = _AnimaEngine.AnimaString_swigregister
AnimaString_swigregister(AnimaString)


_AnimaEngine.ANIMA_MATRIX_SIZE_swigconstant(_AnimaEngine)
ANIMA_MATRIX_SIZE = _AnimaEngine.ANIMA_MATRIX_SIZE
class AnimaMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaMatrix(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaMatrix
    __del__ = lambda self: None

    def __mul__(self, *args):
        return _AnimaEngine.AnimaMatrix___mul__(self, *args)

    def __imul__(self, *args):
        return _AnimaEngine.AnimaMatrix___imul__(self, *args)

    def __add__(self, *args):
        return _AnimaEngine.AnimaMatrix___add__(self, *args)

    def __iadd__(self, *args):
        return _AnimaEngine.AnimaMatrix___iadd__(self, *args)

    def __eq__(self, *args):
        return _AnimaEngine.AnimaMatrix___eq__(self, *args)

    def __ne__(self, *args):
        return _AnimaEngine.AnimaMatrix___ne__(self, *args)

    def Fill(self, p):
        return _AnimaEngine.AnimaMatrix_Fill(self, p)

    def GetXVector(self):
        return _AnimaEngine.AnimaMatrix_GetXVector(self)

    def GetYVector(self):
        return _AnimaEngine.AnimaMatrix_GetYVector(self)

    def GetZVector(self):
        return _AnimaEngine.AnimaMatrix_GetZVector(self)

    def GetPosition(self):
        return _AnimaEngine.AnimaMatrix_GetPosition(self)

    def SetIdentity(self):
        return _AnimaEngine.AnimaMatrix_SetIdentity(self)

    def Keep3x3(self):
        return _AnimaEngine.AnimaMatrix_Keep3x3(self)

    def Transpose(self):
        return _AnimaEngine.AnimaMatrix_Transpose(self)

    def TransposeSSE(self):
        return _AnimaEngine.AnimaMatrix_TransposeSSE(self)

    def Transposed(self):
        return _AnimaEngine.AnimaMatrix_Transposed(self)

    def TransposedSSE(self):
        return _AnimaEngine.AnimaMatrix_TransposedSSE(self)

    def Inverse(self):
        return _AnimaEngine.AnimaMatrix_Inverse(self)

    def InverseSSE(self):
        return _AnimaEngine.AnimaMatrix_InverseSSE(self)

    def Inversed(self):
        return _AnimaEngine.AnimaMatrix_Inversed(self)

    def InversedSSE(self):
        return _AnimaEngine.AnimaMatrix_InversedSSE(self)

    def Determinant(self):
        return _AnimaEngine.AnimaMatrix_Determinant(self)

    def MultiplyMatrix(self, *args):
        return _AnimaEngine.AnimaMatrix_MultiplyMatrix(self, *args)

    def AddMatrix(self, *args):
        return _AnimaEngine.AnimaMatrix_AddMatrix(self, *args)

    def MultiplyMatrixSSE(self, *args):
        return _AnimaEngine.AnimaMatrix_MultiplyMatrixSSE(self, *args)

    def LookAt(self, *args):
        return _AnimaEngine.AnimaMatrix_LookAt(self, *args)
    __swig_getmethods__["MakeLookAt"] = lambda x: _AnimaEngine.AnimaMatrix_MakeLookAt
    if _newclass:
        MakeLookAt = staticmethod(_AnimaEngine.AnimaMatrix_MakeLookAt)

    def Perspective(self, fov, aspect, zNear, zFar):
        return _AnimaEngine.AnimaMatrix_Perspective(self, fov, aspect, zNear, zFar)
    __swig_getmethods__["MakePerspective"] = lambda x: _AnimaEngine.AnimaMatrix_MakePerspective
    if _newclass:
        MakePerspective = staticmethod(_AnimaEngine.AnimaMatrix_MakePerspective)

    def Ortho(self, left, right, bottom, top, zNear, zFar):
        return _AnimaEngine.AnimaMatrix_Ortho(self, left, right, bottom, top, zNear, zFar)
    __swig_getmethods__["MakeOrtho"] = lambda x: _AnimaEngine.AnimaMatrix_MakeOrtho
    if _newclass:
        MakeOrtho = staticmethod(_AnimaEngine.AnimaMatrix_MakeOrtho)

    def Translate(self, *args):
        return _AnimaEngine.AnimaMatrix_Translate(self, *args)
    __swig_getmethods__["MakeTranslation"] = lambda x: _AnimaEngine.AnimaMatrix_MakeTranslation
    if _newclass:
        MakeTranslation = staticmethod(_AnimaEngine.AnimaMatrix_MakeTranslation)

    def Scale(self, *args):
        return _AnimaEngine.AnimaMatrix_Scale(self, *args)
    __swig_getmethods__["MakeScale"] = lambda x: _AnimaEngine.AnimaMatrix_MakeScale
    if _newclass:
        MakeScale = staticmethod(_AnimaEngine.AnimaMatrix_MakeScale)

    def RotateRad(self, *args):
        return _AnimaEngine.AnimaMatrix_RotateRad(self, *args)

    def RotateDeg(self, *args):
        return _AnimaEngine.AnimaMatrix_RotateDeg(self, *args)
    __swig_getmethods__["MakeRotationRad"] = lambda x: _AnimaEngine.AnimaMatrix_MakeRotationRad
    if _newclass:
        MakeRotationRad = staticmethod(_AnimaEngine.AnimaMatrix_MakeRotationRad)
    __swig_getmethods__["MakeRotationDeg"] = lambda x: _AnimaEngine.AnimaMatrix_MakeRotationDeg
    if _newclass:
        MakeRotationDeg = staticmethod(_AnimaEngine.AnimaMatrix_MakeRotationDeg)

    def RotateXRad(self, rad):
        return _AnimaEngine.AnimaMatrix_RotateXRad(self, rad)

    def RotateXDeg(self, deg):
        return _AnimaEngine.AnimaMatrix_RotateXDeg(self, deg)
    __swig_getmethods__["MakeRotationXRad"] = lambda x: _AnimaEngine.AnimaMatrix_MakeRotationXRad
    if _newclass:
        MakeRotationXRad = staticmethod(_AnimaEngine.AnimaMatrix_MakeRotationXRad)
    __swig_getmethods__["MakeRotationXDeg"] = lambda x: _AnimaEngine.AnimaMatrix_MakeRotationXDeg
    if _newclass:
        MakeRotationXDeg = staticmethod(_AnimaEngine.AnimaMatrix_MakeRotationXDeg)

    def RotateYRad(self, rad):
        return _AnimaEngine.AnimaMatrix_RotateYRad(self, rad)

    def RotateYDeg(self, deg):
        return _AnimaEngine.AnimaMatrix_RotateYDeg(self, deg)
    __swig_getmethods__["MakeRotationYRad"] = lambda x: _AnimaEngine.AnimaMatrix_MakeRotationYRad
    if _newclass:
        MakeRotationYRad = staticmethod(_AnimaEngine.AnimaMatrix_MakeRotationYRad)
    __swig_getmethods__["MakeRotationYDeg"] = lambda x: _AnimaEngine.AnimaMatrix_MakeRotationYDeg
    if _newclass:
        MakeRotationYDeg = staticmethod(_AnimaEngine.AnimaMatrix_MakeRotationYDeg)

    def RotateZRad(self, rad):
        return _AnimaEngine.AnimaMatrix_RotateZRad(self, rad)

    def RotateZDeg(self, deg):
        return _AnimaEngine.AnimaMatrix_RotateZDeg(self, deg)
    __swig_getmethods__["MakeRotationZRad"] = lambda x: _AnimaEngine.AnimaMatrix_MakeRotationZRad
    if _newclass:
        MakeRotationZRad = staticmethod(_AnimaEngine.AnimaMatrix_MakeRotationZRad)
    __swig_getmethods__["MakeRotationZDeg"] = lambda x: _AnimaEngine.AnimaMatrix_MakeRotationZDeg
    if _newclass:
        MakeRotationZDeg = staticmethod(_AnimaEngine.AnimaMatrix_MakeRotationZDeg)

    def GetRotationAxes(self):
        return _AnimaEngine.AnimaMatrix_GetRotationAxes(self)

    def Transform4x4(self, *args):
        return _AnimaEngine.AnimaMatrix_Transform4x4(self, *args)

    def Transform4x3(self, *args):
        return _AnimaEngine.AnimaMatrix_Transform4x3(self, *args)

    def Transform3x3(self, *args):
        return _AnimaEngine.AnimaMatrix_Transform3x3(self, *args)

    def DumpMemory(self):
        return _AnimaEngine.AnimaMatrix_DumpMemory(self)
AnimaMatrix_swigregister = _AnimaEngine.AnimaMatrix_swigregister
AnimaMatrix_swigregister(AnimaMatrix)

def AnimaMatrix_MakeLookAt(*args):
    return _AnimaEngine.AnimaMatrix_MakeLookAt(*args)
AnimaMatrix_MakeLookAt = _AnimaEngine.AnimaMatrix_MakeLookAt

def AnimaMatrix_MakePerspective(fov, aspect, zNear, zFar):
    return _AnimaEngine.AnimaMatrix_MakePerspective(fov, aspect, zNear, zFar)
AnimaMatrix_MakePerspective = _AnimaEngine.AnimaMatrix_MakePerspective

def AnimaMatrix_MakeOrtho(left, right, bottom, top, zNear, zFar):
    return _AnimaEngine.AnimaMatrix_MakeOrtho(left, right, bottom, top, zNear, zFar)
AnimaMatrix_MakeOrtho = _AnimaEngine.AnimaMatrix_MakeOrtho

def AnimaMatrix_MakeTranslation(*args):
    return _AnimaEngine.AnimaMatrix_MakeTranslation(*args)
AnimaMatrix_MakeTranslation = _AnimaEngine.AnimaMatrix_MakeTranslation

def AnimaMatrix_MakeScale(*args):
    return _AnimaEngine.AnimaMatrix_MakeScale(*args)
AnimaMatrix_MakeScale = _AnimaEngine.AnimaMatrix_MakeScale

def AnimaMatrix_MakeRotationRad(*args):
    return _AnimaEngine.AnimaMatrix_MakeRotationRad(*args)
AnimaMatrix_MakeRotationRad = _AnimaEngine.AnimaMatrix_MakeRotationRad

def AnimaMatrix_MakeRotationDeg(*args):
    return _AnimaEngine.AnimaMatrix_MakeRotationDeg(*args)
AnimaMatrix_MakeRotationDeg = _AnimaEngine.AnimaMatrix_MakeRotationDeg

def AnimaMatrix_MakeRotationXRad(rad):
    return _AnimaEngine.AnimaMatrix_MakeRotationXRad(rad)
AnimaMatrix_MakeRotationXRad = _AnimaEngine.AnimaMatrix_MakeRotationXRad

def AnimaMatrix_MakeRotationXDeg(deg):
    return _AnimaEngine.AnimaMatrix_MakeRotationXDeg(deg)
AnimaMatrix_MakeRotationXDeg = _AnimaEngine.AnimaMatrix_MakeRotationXDeg

def AnimaMatrix_MakeRotationYRad(rad):
    return _AnimaEngine.AnimaMatrix_MakeRotationYRad(rad)
AnimaMatrix_MakeRotationYRad = _AnimaEngine.AnimaMatrix_MakeRotationYRad

def AnimaMatrix_MakeRotationYDeg(deg):
    return _AnimaEngine.AnimaMatrix_MakeRotationYDeg(deg)
AnimaMatrix_MakeRotationYDeg = _AnimaEngine.AnimaMatrix_MakeRotationYDeg

def AnimaMatrix_MakeRotationZRad(rad):
    return _AnimaEngine.AnimaMatrix_MakeRotationZRad(rad)
AnimaMatrix_MakeRotationZRad = _AnimaEngine.AnimaMatrix_MakeRotationZRad

def AnimaMatrix_MakeRotationZDeg(deg):
    return _AnimaEngine.AnimaMatrix_MakeRotationZDeg(deg)
AnimaMatrix_MakeRotationZDeg = _AnimaEngine.AnimaMatrix_MakeRotationZDeg

class AnimaVertex2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaVertex2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaVertex2f, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaVertex2f(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaVertex2f
    __del__ = lambda self: None

    def __eq__(self, param):
        return _AnimaEngine.AnimaVertex2f___eq__(self, param)

    def __ne__(self, param):
        return _AnimaEngine.AnimaVertex2f___ne__(self, param)

    def IsNull(self):
        return _AnimaEngine.AnimaVertex2f_IsNull(self)

    def __neg__(self):
        return _AnimaEngine.AnimaVertex2f___neg__(self)

    def __iadd__(self, *args):
        return _AnimaEngine.AnimaVertex2f___iadd__(self, *args)

    def __isub__(self, *args):
        return _AnimaEngine.AnimaVertex2f___isub__(self, *args)

    def __imul__(self, *args):
        return _AnimaEngine.AnimaVertex2f___imul__(self, *args)

    def __idiv__(self, *args):
        return _AnimaEngine.AnimaVertex2f___idiv__(self, *args)

    def Fill(self, *args):
        return _AnimaEngine.AnimaVertex2f_Fill(self, *args)

    def Normalize(self):
        return _AnimaEngine.AnimaVertex2f_Normalize(self)

    def Normalized(self):
        return _AnimaEngine.AnimaVertex2f_Normalized(self)

    def Clamp(self, *args):
        return _AnimaEngine.AnimaVertex2f_Clamp(self, *args)

    def Clamped(self, *args):
        return _AnimaEngine.AnimaVertex2f_Clamped(self, *args)

    def Length(self):
        return _AnimaEngine.AnimaVertex2f_Length(self)

    def Length2(self):
        return _AnimaEngine.AnimaVertex2f_Length2(self)

    def ResetNextIndex(self):
        return _AnimaEngine.AnimaVertex2f_ResetNextIndex(self)

    def SetNextValue(self, val):
        return _AnimaEngine.AnimaVertex2f_SetNextValue(self, val)
AnimaVertex2f_swigregister = _AnimaEngine.AnimaVertex2f_swigregister
AnimaVertex2f_swigregister(AnimaVertex2f)

class AnimaVertex3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaVertex3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaVertex3f, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaVertex3f(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaVertex3f
    __del__ = lambda self: None

    def __eq__(self, param):
        return _AnimaEngine.AnimaVertex3f___eq__(self, param)

    def __ne__(self, param):
        return _AnimaEngine.AnimaVertex3f___ne__(self, param)

    def IsNull(self):
        return _AnimaEngine.AnimaVertex3f_IsNull(self)

    def __neg__(self):
        return _AnimaEngine.AnimaVertex3f___neg__(self)

    def __iadd__(self, *args):
        return _AnimaEngine.AnimaVertex3f___iadd__(self, *args)

    def __isub__(self, *args):
        return _AnimaEngine.AnimaVertex3f___isub__(self, *args)

    def __imul__(self, *args):
        return _AnimaEngine.AnimaVertex3f___imul__(self, *args)

    def __idiv__(self, *args):
        return _AnimaEngine.AnimaVertex3f___idiv__(self, *args)

    def Fill(self, *args):
        return _AnimaEngine.AnimaVertex3f_Fill(self, *args)

    def Normalize(self):
        return _AnimaEngine.AnimaVertex3f_Normalize(self)

    def Normalized(self):
        return _AnimaEngine.AnimaVertex3f_Normalized(self)

    def Clamp(self, *args):
        return _AnimaEngine.AnimaVertex3f_Clamp(self, *args)

    def Clamped(self, *args):
        return _AnimaEngine.AnimaVertex3f_Clamped(self, *args)

    def InnerProduct(self, v):
        return _AnimaEngine.AnimaVertex3f_InnerProduct(self, v)

    def Length(self):
        return _AnimaEngine.AnimaVertex3f_Length(self)

    def Length2(self):
        return _AnimaEngine.AnimaVertex3f_Length2(self)

    def ResetNextIndex(self):
        return _AnimaEngine.AnimaVertex3f_ResetNextIndex(self)

    def SetNextValue(self, val):
        return _AnimaEngine.AnimaVertex3f_SetNextValue(self, val)
AnimaVertex3f_swigregister = _AnimaEngine.AnimaVertex3f_swigregister
AnimaVertex3f_swigregister(AnimaVertex3f)

class AnimaVertex4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaVertex4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaVertex4f, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaVertex4f(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaVertex4f
    __del__ = lambda self: None

    def __eq__(self, param):
        return _AnimaEngine.AnimaVertex4f___eq__(self, param)

    def __ne__(self, param):
        return _AnimaEngine.AnimaVertex4f___ne__(self, param)

    def IsNull(self):
        return _AnimaEngine.AnimaVertex4f_IsNull(self)

    def __neg__(self):
        return _AnimaEngine.AnimaVertex4f___neg__(self)

    def __iadd__(self, *args):
        return _AnimaEngine.AnimaVertex4f___iadd__(self, *args)

    def __isub__(self, *args):
        return _AnimaEngine.AnimaVertex4f___isub__(self, *args)

    def __imul__(self, *args):
        return _AnimaEngine.AnimaVertex4f___imul__(self, *args)

    def __idiv__(self, *args):
        return _AnimaEngine.AnimaVertex4f___idiv__(self, *args)

    def Fill(self, *args):
        return _AnimaEngine.AnimaVertex4f_Fill(self, *args)

    def Normalize(self):
        return _AnimaEngine.AnimaVertex4f_Normalize(self)

    def Normalized(self):
        return _AnimaEngine.AnimaVertex4f_Normalized(self)

    def Clamp(self, *args):
        return _AnimaEngine.AnimaVertex4f_Clamp(self, *args)

    def Clamped(self, *args):
        return _AnimaEngine.AnimaVertex4f_Clamped(self, *args)

    def Length(self):
        return _AnimaEngine.AnimaVertex4f_Length(self)

    def Length2(self):
        return _AnimaEngine.AnimaVertex4f_Length2(self)

    def ResetNextIndex(self):
        return _AnimaEngine.AnimaVertex4f_ResetNextIndex(self)

    def SetNextValue(self, val):
        return _AnimaEngine.AnimaVertex4f_SetNextValue(self, val)
AnimaVertex4f_swigregister = _AnimaEngine.AnimaVertex4f_swigregister
AnimaVertex4f_swigregister(AnimaVertex4f)


def __xor__(a, b):
    return _AnimaEngine.__xor__(a, b)
__xor__ = _AnimaEngine.__xor__

def __mul__(*args):
    return _AnimaEngine.__mul__(*args)
__mul__ = _AnimaEngine.__mul__

def __div__(*args):
    return _AnimaEngine.__div__(*args)
__div__ = _AnimaEngine.__div__

def __sub__(*args):
    return _AnimaEngine.__sub__(*args)
__sub__ = _AnimaEngine.__sub__

def __add__(*args):
    return _AnimaEngine.__add__(*args)
__add__ = _AnimaEngine.__add__

def Dot(*args):
    return _AnimaEngine.Dot(*args)
Dot = _AnimaEngine.Dot

def Cross(a, b):
    return _AnimaEngine.Cross(a, b)
Cross = _AnimaEngine.Cross
class AnimaQuaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaQuaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaQuaternion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaQuaternion(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaQuaternion
    __del__ = lambda self: None

    def __add__(self, p):
        return _AnimaEngine.AnimaQuaternion___add__(self, p)

    def __iadd__(self, p):
        return _AnimaEngine.AnimaQuaternion___iadd__(self, p)

    def __imul__(self, *args):
        return _AnimaEngine.AnimaQuaternion___imul__(self, *args)

    def __mul__(self, *args):
        return _AnimaEngine.AnimaQuaternion___mul__(self, *args)

    def __eq__(self, p):
        return _AnimaEngine.AnimaQuaternion___eq__(self, p)

    def __ne__(self, p):
        return _AnimaEngine.AnimaQuaternion___ne__(self, p)

    def Set(self, x, y, z, w):
        return _AnimaEngine.AnimaQuaternion_Set(self, x, y, z, w)

    def FromAxisAndAngleRad(self, *args):
        return _AnimaEngine.AnimaQuaternion_FromAxisAndAngleRad(self, *args)

    def FromAxisAndAngleDeg(self, *args):
        return _AnimaEngine.AnimaQuaternion_FromAxisAndAngleDeg(self, *args)

    def FromMatrix(self, *args):
        return _AnimaEngine.AnimaQuaternion_FromMatrix(self, *args)

    def GetMatrix(self, *args):
        return _AnimaEngine.AnimaQuaternion_GetMatrix(self, *args)

    def GetMatrix4x3(self, *args):
        return _AnimaEngine.AnimaQuaternion_GetMatrix4x3(self, *args)

    def SetIdentity(self):
        return _AnimaEngine.AnimaQuaternion_SetIdentity(self)

    def Slerp(self, q, c):
        return _AnimaEngine.AnimaQuaternion_Slerp(self, q, c)

    def Slerped(self, q, c):
        return _AnimaEngine.AnimaQuaternion_Slerped(self, q, c)

    def Conjugate(self):
        return _AnimaEngine.AnimaQuaternion_Conjugate(self)

    def Conjugated(self):
        return _AnimaEngine.AnimaQuaternion_Conjugated(self)

    def Inverse(self):
        return _AnimaEngine.AnimaQuaternion_Inverse(self)

    def Inversed(self):
        return _AnimaEngine.AnimaQuaternion_Inversed(self)

    def Magnitude(self):
        return _AnimaEngine.AnimaQuaternion_Magnitude(self)

    def Magnitude2(self):
        return _AnimaEngine.AnimaQuaternion_Magnitude2(self)

    def Normalize(self):
        return _AnimaEngine.AnimaQuaternion_Normalize(self)

    def Normalized(self):
        return _AnimaEngine.AnimaQuaternion_Normalized(self)

    def Scale(self, s):
        return _AnimaEngine.AnimaQuaternion_Scale(self, s)

    def Scaled(self, s):
        return _AnimaEngine.AnimaQuaternion_Scaled(self, s)
AnimaQuaternion_swigregister = _AnimaEngine.AnimaQuaternion_swigregister
AnimaQuaternion_swigregister(AnimaQuaternion)

class AnimaMath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaMath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaMath, name)
    __repr__ = _swig_repr
    __swig_getmethods__["QuaternionMulQuaternion"] = lambda x: _AnimaEngine.AnimaMath_QuaternionMulQuaternion
    if _newclass:
        QuaternionMulQuaternion = staticmethod(_AnimaEngine.AnimaMath_QuaternionMulQuaternion)
    __swig_getmethods__["QuaternionMulVector"] = lambda x: _AnimaEngine.AnimaMath_QuaternionMulVector
    if _newclass:
        QuaternionMulVector = staticmethod(_AnimaEngine.AnimaMath_QuaternionMulVector)
    __swig_getmethods__["RotateVector"] = lambda x: _AnimaEngine.AnimaMath_RotateVector
    if _newclass:
        RotateVector = staticmethod(_AnimaEngine.AnimaMath_RotateVector)
    __swig_getmethods__["PointInsideSphere"] = lambda x: _AnimaEngine.AnimaMath_PointInsideSphere
    if _newclass:
        PointInsideSphere = staticmethod(_AnimaEngine.AnimaMath_PointInsideSphere)
    __swig_getmethods__["PointInsideCone"] = lambda x: _AnimaEngine.AnimaMath_PointInsideCone
    if _newclass:
        PointInsideCone = staticmethod(_AnimaEngine.AnimaMath_PointInsideCone)

    def __init__(self):
        this = _AnimaEngine.new_AnimaMath()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaMath
    __del__ = lambda self: None
AnimaMath_swigregister = _AnimaEngine.AnimaMath_swigregister
AnimaMath_swigregister(AnimaMath)

def AnimaMath_QuaternionMulQuaternion(q1, q2):
    return _AnimaEngine.AnimaMath_QuaternionMulQuaternion(q1, q2)
AnimaMath_QuaternionMulQuaternion = _AnimaEngine.AnimaMath_QuaternionMulQuaternion

def AnimaMath_QuaternionMulVector(q, v):
    return _AnimaEngine.AnimaMath_QuaternionMulVector(q, v)
AnimaMath_QuaternionMulVector = _AnimaEngine.AnimaMath_QuaternionMulVector

def AnimaMath_RotateVector(*args):
    return _AnimaEngine.AnimaMath_RotateVector(*args)
AnimaMath_RotateVector = _AnimaEngine.AnimaMath_RotateVector

def AnimaMath_PointInsideSphere(point, sphereCenter, sphereRadius):
    return _AnimaEngine.AnimaMath_PointInsideSphere(point, sphereCenter, sphereRadius)
AnimaMath_PointInsideSphere = _AnimaEngine.AnimaMath_PointInsideSphere

def AnimaMath_PointInsideCone(point, coneTip, coneDirection, coneHeight, coneAngle):
    return _AnimaEngine.AnimaMath_PointInsideCone(point, coneTip, coneDirection, coneHeight, coneAngle)
AnimaMath_PointInsideCone = _AnimaEngine.AnimaMath_PointInsideCone

class AnimaTimer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaTimer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaTimer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimaEngine.new_AnimaTimer()
        try:
            self.this.append(this)
        except:
            self.this = this

    def Reset(self):
        return _AnimaEngine.AnimaTimer_Reset(self)

    def Elapsed(self):
        return _AnimaEngine.AnimaTimer_Elapsed(self)

    def PrintElapsed(self):
        return _AnimaEngine.AnimaTimer_PrintElapsed(self)
    __swig_destroy__ = _AnimaEngine.delete_AnimaTimer
    __del__ = lambda self: None
AnimaTimer_swigregister = _AnimaEngine.AnimaTimer_swigregister
AnimaTimer_swigregister(AnimaTimer)

class AnimaFPSTimer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaFPSTimer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaFPSTimer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AnimaEngine.new_AnimaFPSTimer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaFPSTimer
    __del__ = lambda self: None

    def Init(self):
        return _AnimaEngine.AnimaFPSTimer_Init(self)

    def Update(self):
        return _AnimaEngine.AnimaFPSTimer_Update(self)

    def GetElapsedSeconds(self):
        return _AnimaEngine.AnimaFPSTimer_GetElapsedSeconds(self)

    def GetFPS(self):
        return _AnimaEngine.AnimaFPSTimer_GetFPS(self)
AnimaFPSTimer_swigregister = _AnimaEngine.AnimaFPSTimer_swigregister
AnimaFPSTimer_swigregister(AnimaFPSTimer)

class AnimaFrustum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaFrustum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaFrustum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaFrustum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaFrustum
    __del__ = lambda self: None

    def GetFrustumVertex(self, index):
        return _AnimaEngine.AnimaFrustum_GetFrustumVertex(self, index)

    def GetFrustumVertices(self, vertices):
        return _AnimaEngine.AnimaFrustum_GetFrustumVertices(self, vertices)

    def GetBoundingBoxMin(self):
        return _AnimaEngine.AnimaFrustum_GetBoundingBoxMin(self)

    def GetBoundingBoxMax(self):
        return _AnimaEngine.AnimaFrustum_GetBoundingBoxMax(self)

    def GetBoundingBoxCenter(self):
        return _AnimaEngine.AnimaFrustum_GetBoundingBoxCenter(self)

    def ComputeFrustum(self, projectionViewMatrix):
        return _AnimaEngine.AnimaFrustum_ComputeFrustum(self, projectionViewMatrix)

    def SphereInFrustum(self, center, radius):
        return _AnimaEngine.AnimaFrustum_SphereInFrustum(self, center, radius)
AnimaFrustum_swigregister = _AnimaEngine.AnimaFrustum_swigregister
AnimaFrustum_swigregister(AnimaFrustum)

class AnimaNamedObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaNamedObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaNamedObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaNamedObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaNamedObject
    __del__ = lambda self: None

    def SetName(self, *args):
        return _AnimaEngine.AnimaNamedObject_SetName(self, *args)

    def GetAnimaName(self):
        return _AnimaEngine.AnimaNamedObject_GetAnimaName(self)

    def GetName(self):
        return _AnimaEngine.AnimaNamedObject_GetName(self)
AnimaNamedObject_swigregister = _AnimaEngine.AnimaNamedObject_swigregister
AnimaNamedObject_swigregister(AnimaNamedObject)

class AnimaMappedValues(AnimaNamedObject):
    __swig_setmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaMappedValues, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaMappedValues, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimaEngine.delete_AnimaMappedValues
    __del__ = lambda self: None

    def CopyData(self, src):
        return _AnimaEngine.AnimaMappedValues_CopyData(self, src)

    def GetShaderPrefix(self):
        return _AnimaEngine.AnimaMappedValues_GetShaderPrefix(self)

    def AddTexture(self, *args):
        return _AnimaEngine.AnimaMappedValues_AddTexture(self, *args)

    def AddColor(self, *args):
        return _AnimaEngine.AnimaMappedValues_AddColor(self, *args)

    def AddVector(self, *args):
        return _AnimaEngine.AnimaMappedValues_AddVector(self, *args)

    def AddVectorArray(self, *args):
        return _AnimaEngine.AnimaMappedValues_AddVectorArray(self, *args)

    def AddFloat(self, *args):
        return _AnimaEngine.AnimaMappedValues_AddFloat(self, *args)

    def AddBoolean(self, *args):
        return _AnimaEngine.AnimaMappedValues_AddBoolean(self, *args)

    def AddInteger(self, *args):
        return _AnimaEngine.AnimaMappedValues_AddInteger(self, *args)

    def AddMatrix(self, *args):
        return _AnimaEngine.AnimaMappedValues_AddMatrix(self, *args)

    def AddMatrixArray(self, *args):
        return _AnimaEngine.AnimaMappedValues_AddMatrixArray(self, *args)

    def SetTexture(self, *args):
        return _AnimaEngine.AnimaMappedValues_SetTexture(self, *args)

    def SetColor(self, *args):
        return _AnimaEngine.AnimaMappedValues_SetColor(self, *args)

    def SetVector(self, *args):
        return _AnimaEngine.AnimaMappedValues_SetVector(self, *args)

    def SetVectorArray(self, *args):
        return _AnimaEngine.AnimaMappedValues_SetVectorArray(self, *args)

    def SetFloat(self, *args):
        return _AnimaEngine.AnimaMappedValues_SetFloat(self, *args)

    def SetBoolean(self, *args):
        return _AnimaEngine.AnimaMappedValues_SetBoolean(self, *args)

    def SetInteger(self, *args):
        return _AnimaEngine.AnimaMappedValues_SetInteger(self, *args)

    def SetMatrix(self, *args):
        return _AnimaEngine.AnimaMappedValues_SetMatrix(self, *args)

    def SetMatrixArray(self, *args):
        return _AnimaEngine.AnimaMappedValues_SetMatrixArray(self, *args)

    def GetTexture(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetTexture(self, *args)

    def GetColor3f(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetColor3f(self, *args)

    def GetColor4f(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetColor4f(self, *args)

    def GetVector2f(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetVector2f(self, *args)

    def GetVector3f(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetVector3f(self, *args)

    def GetVector4f(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetVector4f(self, *args)

    def GetVectorArray(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetVectorArray(self, *args)

    def GetFloat(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetFloat(self, *args)

    def GetInteger(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetInteger(self, *args)

    def GetBoolean(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetBoolean(self, *args)

    def GetMatrix(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetMatrix(self, *args)

    def GetMatrixArray(self, *args):
        return _AnimaEngine.AnimaMappedValues_GetMatrixArray(self, *args)

    def HasTexture(self, *args):
        return _AnimaEngine.AnimaMappedValues_HasTexture(self, *args)

    def HasColor(self, *args):
        return _AnimaEngine.AnimaMappedValues_HasColor(self, *args)

    def HasVector(self, *args):
        return _AnimaEngine.AnimaMappedValues_HasVector(self, *args)

    def HasVectorArray(self, *args):
        return _AnimaEngine.AnimaMappedValues_HasVectorArray(self, *args)

    def HasFloat(self, *args):
        return _AnimaEngine.AnimaMappedValues_HasFloat(self, *args)

    def HasInteger(self, *args):
        return _AnimaEngine.AnimaMappedValues_HasInteger(self, *args)

    def HasBoolean(self, *args):
        return _AnimaEngine.AnimaMappedValues_HasBoolean(self, *args)

    def HasMatrix(self, *args):
        return _AnimaEngine.AnimaMappedValues_HasMatrix(self, *args)

    def HasMatrixArray(self, *args):
        return _AnimaEngine.AnimaMappedValues_HasMatrixArray(self, *args)

    def CopyTextures(self, src):
        return _AnimaEngine.AnimaMappedValues_CopyTextures(self, src)

    def CopyColors(self, src):
        return _AnimaEngine.AnimaMappedValues_CopyColors(self, src)

    def CopyVectors(self, src):
        return _AnimaEngine.AnimaMappedValues_CopyVectors(self, src)

    def CopyVectorsArrays(self, src):
        return _AnimaEngine.AnimaMappedValues_CopyVectorsArrays(self, src)

    def CopyMatrices(self, src):
        return _AnimaEngine.AnimaMappedValues_CopyMatrices(self, src)

    def CopyMatricesArrays(self, src):
        return _AnimaEngine.AnimaMappedValues_CopyMatricesArrays(self, src)

    def CopyFloats(self, src):
        return _AnimaEngine.AnimaMappedValues_CopyFloats(self, src)

    def CopyIntegers(self, src):
        return _AnimaEngine.AnimaMappedValues_CopyIntegers(self, src)

    def CopyBooleans(self, src):
        return _AnimaEngine.AnimaMappedValues_CopyBooleans(self, src)
AnimaMappedValues_swigregister = _AnimaEngine.AnimaMappedValues_swigregister
AnimaMappedValues_swigregister(AnimaMappedValues)

class AnimaSceneObject(AnimaMappedValues):
    __swig_setmethods__ = {}
    for _s in [AnimaMappedValues]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaSceneObject, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaMappedValues]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaSceneObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaSceneObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaSceneObject
    __del__ = lambda self: None

    def GetPosition(self):
        return _AnimaEngine.AnimaSceneObject_GetPosition(self)

    def SetPosition(self, *args):
        return _AnimaEngine.AnimaSceneObject_SetPosition(self, *args)

    def SetParentObject(self, parentObject):
        return _AnimaEngine.AnimaSceneObject_SetParentObject(self, parentObject)

    def GetParentObject(self):
        return _AnimaEngine.AnimaSceneObject_GetParentObject(self)

    def GetAncestorObject(self):
        return _AnimaEngine.AnimaSceneObject_GetAncestorObject(self)

    def AddChild(self, child):
        return _AnimaEngine.AnimaSceneObject_AddChild(self, child)

    def GetChildrenNumber(self):
        return _AnimaEngine.AnimaSceneObject_GetChildrenNumber(self)

    def GetChild(self, *args):
        return _AnimaEngine.AnimaSceneObject_GetChild(self, *args)

    def RemoveChild(self, *args):
        return _AnimaEngine.AnimaSceneObject_RemoveChild(self, *args)

    def HasChild(self, *args):
        return _AnimaEngine.AnimaSceneObject_HasChild(self, *args)

    def GetTransformation(self):
        return _AnimaEngine.AnimaSceneObject_GetTransformation(self)

    def GetTransformationCopy(self):
        return _AnimaEngine.AnimaSceneObject_GetTransformationCopy(self)

    def GetShaderPrefix(self):
        return _AnimaEngine.AnimaSceneObject_GetShaderPrefix(self)
AnimaSceneObject_swigregister = _AnimaEngine.AnimaSceneObject_swigregister
AnimaSceneObject_swigregister(AnimaSceneObject)

class AnimaTransformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaTransformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaTransformation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaTransformation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaTransformation
    __del__ = lambda self: None

    def Translate(self, *args):
        return _AnimaEngine.AnimaTransformation_Translate(self, *args)

    def TranslateX(self, tx):
        return _AnimaEngine.AnimaTransformation_TranslateX(self, tx)

    def TranslateY(self, ty):
        return _AnimaEngine.AnimaTransformation_TranslateY(self, ty)

    def TranslateZ(self, tz):
        return _AnimaEngine.AnimaTransformation_TranslateZ(self, tz)

    def SetTranslation(self, *args):
        return _AnimaEngine.AnimaTransformation_SetTranslation(self, *args)

    def SetTranslationX(self, tx):
        return _AnimaEngine.AnimaTransformation_SetTranslationX(self, tx)

    def SetTranslationY(self, ty):
        return _AnimaEngine.AnimaTransformation_SetTranslationY(self, ty)

    def SetTranslationZ(self, tz):
        return _AnimaEngine.AnimaTransformation_SetTranslationZ(self, tz)

    def GetTranslation(self):
        return _AnimaEngine.AnimaTransformation_GetTranslation(self)

    def GetTranslationX(self):
        return _AnimaEngine.AnimaTransformation_GetTranslationX(self)

    def GetTranslationY(self):
        return _AnimaEngine.AnimaTransformation_GetTranslationY(self)

    def GetTranslationZ(self):
        return _AnimaEngine.AnimaTransformation_GetTranslationZ(self)

    def Rotate(self, *args):
        return _AnimaEngine.AnimaTransformation_Rotate(self, *args)

    def RotateX(self, rx):
        return _AnimaEngine.AnimaTransformation_RotateX(self, rx)

    def RotateY(self, ry):
        return _AnimaEngine.AnimaTransformation_RotateY(self, ry)

    def RotateZ(self, rz):
        return _AnimaEngine.AnimaTransformation_RotateZ(self, rz)

    def SetRotation(self, *args):
        return _AnimaEngine.AnimaTransformation_SetRotation(self, *args)

    def SetRotationX(self, rx):
        return _AnimaEngine.AnimaTransformation_SetRotationX(self, rx)

    def SetRotationY(self, ry):
        return _AnimaEngine.AnimaTransformation_SetRotationY(self, ry)

    def SetRotationZ(self, rz):
        return _AnimaEngine.AnimaTransformation_SetRotationZ(self, rz)

    def RotateDeg(self, *args):
        return _AnimaEngine.AnimaTransformation_RotateDeg(self, *args)

    def RotateXDeg(self, rx):
        return _AnimaEngine.AnimaTransformation_RotateXDeg(self, rx)

    def RotateYDeg(self, ry):
        return _AnimaEngine.AnimaTransformation_RotateYDeg(self, ry)

    def RotateZDeg(self, rz):
        return _AnimaEngine.AnimaTransformation_RotateZDeg(self, rz)

    def SetRotationDeg(self, *args):
        return _AnimaEngine.AnimaTransformation_SetRotationDeg(self, *args)

    def SetRotationXDeg(self, rx):
        return _AnimaEngine.AnimaTransformation_SetRotationXDeg(self, rx)

    def SetRotationYDeg(self, ry):
        return _AnimaEngine.AnimaTransformation_SetRotationYDeg(self, ry)

    def SetRotationZDeg(self, rz):
        return _AnimaEngine.AnimaTransformation_SetRotationZDeg(self, rz)

    def GetRotation(self):
        return _AnimaEngine.AnimaTransformation_GetRotation(self)

    def GetRotationX(self):
        return _AnimaEngine.AnimaTransformation_GetRotationX(self)

    def GetRotationY(self):
        return _AnimaEngine.AnimaTransformation_GetRotationY(self)

    def GetRotationZ(self):
        return _AnimaEngine.AnimaTransformation_GetRotationZ(self)

    def Scale(self, *args):
        return _AnimaEngine.AnimaTransformation_Scale(self, *args)

    def ScaleX(self, sx):
        return _AnimaEngine.AnimaTransformation_ScaleX(self, sx)

    def ScaleY(self, sy):
        return _AnimaEngine.AnimaTransformation_ScaleY(self, sy)

    def ScaleZ(self, sz):
        return _AnimaEngine.AnimaTransformation_ScaleZ(self, sz)

    def SetScale(self, *args):
        return _AnimaEngine.AnimaTransformation_SetScale(self, *args)

    def SetScaleX(self, sx):
        return _AnimaEngine.AnimaTransformation_SetScaleX(self, sx)

    def SetScaleY(self, sy):
        return _AnimaEngine.AnimaTransformation_SetScaleY(self, sy)

    def SetScaleZ(self, sz):
        return _AnimaEngine.AnimaTransformation_SetScaleZ(self, sz)

    def GetScale(self):
        return _AnimaEngine.AnimaTransformation_GetScale(self)

    def GetScaleX(self):
        return _AnimaEngine.AnimaTransformation_GetScaleX(self)

    def GetScaleY(self):
        return _AnimaEngine.AnimaTransformation_GetScaleY(self)

    def GetScaleZ(self):
        return _AnimaEngine.AnimaTransformation_GetScaleZ(self)

    def UpdateMatrix(self):
        return _AnimaEngine.AnimaTransformation_UpdateMatrix(self)

    def SetTransformationMatrix(self, *args):
        return _AnimaEngine.AnimaTransformation_SetTransformationMatrix(self, *args)

    def SetNormalMatrix(self, *args):
        return _AnimaEngine.AnimaTransformation_SetNormalMatrix(self, *args)

    def SetModelNodeTransformationMatrix(self, *args):
        return _AnimaEngine.AnimaTransformation_SetModelNodeTransformationMatrix(self, *args)

    def GetTransformationMatrix(self):
        return _AnimaEngine.AnimaTransformation_GetTransformationMatrix(self)

    def GetPTransformationMatrix(self):
        return _AnimaEngine.AnimaTransformation_GetPTransformationMatrix(self)

    def GetNormalMatrix(self):
        return _AnimaEngine.AnimaTransformation_GetNormalMatrix(self)

    def GetPNormalMatrix(self):
        return _AnimaEngine.AnimaTransformation_GetPNormalMatrix(self)

    def GetModelNodeTransformationMatrix(self):
        return _AnimaEngine.AnimaTransformation_GetModelNodeTransformationMatrix(self)

    def GetPTModelNoderansformationMatrix(self):
        return _AnimaEngine.AnimaTransformation_GetPTModelNoderansformationMatrix(self)

    def GetParentObject(self):
        return _AnimaEngine.AnimaTransformation_GetParentObject(self)
AnimaTransformation_swigregister = _AnimaEngine.AnimaTransformation_swigregister
AnimaTransformation_swigregister(AnimaTransformation)

class AnimaCamera(AnimaSceneObject):
    __swig_setmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaCamera, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaCamera, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PERSPECTIVE = _AnimaEngine.AnimaCamera_PERSPECTIVE
    ORTHO = _AnimaEngine.AnimaCamera_ORTHO
    __swig_destroy__ = _AnimaEngine.delete_AnimaCamera
    __del__ = lambda self: None

    def GetPosition(self):
        return _AnimaEngine.AnimaCamera_GetPosition(self)

    def SetPosition(self, *args):
        return _AnimaEngine.AnimaCamera_SetPosition(self, *args)

    def GetUp(self):
        return _AnimaEngine.AnimaCamera_GetUp(self)

    def GetForward(self):
        return _AnimaEngine.AnimaCamera_GetForward(self)

    def GetLeft(self):
        return _AnimaEngine.AnimaCamera_GetLeft(self)

    def GetRight(self):
        return _AnimaEngine.AnimaCamera_GetRight(self)

    def IsActive(self):
        return _AnimaEngine.AnimaCamera_IsActive(self)

    def Zoom(self, amount):
        return _AnimaEngine.AnimaCamera_Zoom(self, amount)

    def Move(self, *args):
        return _AnimaEngine.AnimaCamera_Move(self, *args)

    def RotateX(self, angle):
        return _AnimaEngine.AnimaCamera_RotateX(self, angle)

    def RotateXDeg(self, angle):
        return _AnimaEngine.AnimaCamera_RotateXDeg(self, angle)

    def RotateY(self, angle):
        return _AnimaEngine.AnimaCamera_RotateY(self, angle)

    def RotateYDeg(self, angle):
        return _AnimaEngine.AnimaCamera_RotateYDeg(self, angle)

    def LookAt(self, *args):
        return _AnimaEngine.AnimaCamera_LookAt(self, *args)

    def CalculateViewMatrix(self):
        return _AnimaEngine.AnimaCamera_CalculateViewMatrix(self)

    def SetViewMatrix(self, matrix):
        return _AnimaEngine.AnimaCamera_SetViewMatrix(self, matrix)

    def GetViewMatrix(self):
        return _AnimaEngine.AnimaCamera_GetViewMatrix(self)

    def CalculateProjectionMatrix(self, *args):
        return _AnimaEngine.AnimaCamera_CalculateProjectionMatrix(self, *args)

    def SetProjectionMatrix(self, matrix):
        return _AnimaEngine.AnimaCamera_SetProjectionMatrix(self, matrix)

    def GetProjectionMatrix(self):
        return _AnimaEngine.AnimaCamera_GetProjectionMatrix(self)

    def GetProjectionViewMatrix(self):
        return _AnimaEngine.AnimaCamera_GetProjectionViewMatrix(self)

    def GetInversedProjectionViewMatrix(self):
        return _AnimaEngine.AnimaCamera_GetInversedProjectionViewMatrix(self)

    def Activate(self):
        return _AnimaEngine.AnimaCamera_Activate(self)

    def Deactivate(self):
        return _AnimaEngine.AnimaCamera_Deactivate(self)

    def IsPerspectiveProjectionType(self):
        return _AnimaEngine.AnimaCamera_IsPerspectiveProjectionType(self)

    def IsOrthoProjectionType(self):
        return _AnimaEngine.AnimaCamera_IsOrthoProjectionType(self)

    def GetWindowSize(self):
        return _AnimaEngine.AnimaCamera_GetWindowSize(self)

    def GetFrustum(self):
        return _AnimaEngine.AnimaCamera_GetFrustum(self)

    def GetShaderPrefix(self):
        return _AnimaEngine.AnimaCamera_GetShaderPrefix(self)
AnimaCamera_swigregister = _AnimaEngine.AnimaCamera_swigregister
AnimaCamera_swigregister(AnimaCamera)

class AnimaFirstPersonCamera(AnimaCamera):
    __swig_setmethods__ = {}
    for _s in [AnimaCamera]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaFirstPersonCamera, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaCamera]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaFirstPersonCamera, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaFirstPersonCamera(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaFirstPersonCamera
    __del__ = lambda self: None

    def Zoom(self, amount):
        return _AnimaEngine.AnimaFirstPersonCamera_Zoom(self, amount)

    def Move(self, *args):
        return _AnimaEngine.AnimaFirstPersonCamera_Move(self, *args)

    def RotateX(self, angle):
        return _AnimaEngine.AnimaFirstPersonCamera_RotateX(self, angle)

    def RotateXDeg(self, angle):
        return _AnimaEngine.AnimaFirstPersonCamera_RotateXDeg(self, angle)

    def RotateY(self, angle):
        return _AnimaEngine.AnimaFirstPersonCamera_RotateY(self, angle)

    def RotateYDeg(self, angle):
        return _AnimaEngine.AnimaFirstPersonCamera_RotateYDeg(self, angle)

    def CalculateViewMatrix(self):
        return _AnimaEngine.AnimaFirstPersonCamera_CalculateViewMatrix(self)

    def LookAt(self, *args):
        return _AnimaEngine.AnimaFirstPersonCamera_LookAt(self, *args)
AnimaFirstPersonCamera_swigregister = _AnimaEngine.AnimaFirstPersonCamera_swigregister
AnimaFirstPersonCamera_swigregister(AnimaFirstPersonCamera)

class AnimaThirdPersonCamera(AnimaCamera):
    __swig_setmethods__ = {}
    for _s in [AnimaCamera]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaThirdPersonCamera, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaCamera]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaThirdPersonCamera, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaThirdPersonCamera(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaThirdPersonCamera
    __del__ = lambda self: None

    def GetTarget(self):
        return _AnimaEngine.AnimaThirdPersonCamera_GetTarget(self)

    def CalculateViewMatrix(self):
        return _AnimaEngine.AnimaThirdPersonCamera_CalculateViewMatrix(self)

    def GetDistance(self):
        return _AnimaEngine.AnimaThirdPersonCamera_GetDistance(self)

    def SetDistance(self, dist):
        return _AnimaEngine.AnimaThirdPersonCamera_SetDistance(self, dist)

    def Zoom(self, amount):
        return _AnimaEngine.AnimaThirdPersonCamera_Zoom(self, amount)

    def Move(self, *args):
        return _AnimaEngine.AnimaThirdPersonCamera_Move(self, *args)

    def RotateX(self, angle):
        return _AnimaEngine.AnimaThirdPersonCamera_RotateX(self, angle)

    def RotateXDeg(self, angle):
        return _AnimaEngine.AnimaThirdPersonCamera_RotateXDeg(self, angle)

    def RotateY(self, angle):
        return _AnimaEngine.AnimaThirdPersonCamera_RotateY(self, angle)

    def RotateYDeg(self, angle):
        return _AnimaEngine.AnimaThirdPersonCamera_RotateYDeg(self, angle)

    def LookAt(self, *args):
        return _AnimaEngine.AnimaThirdPersonCamera_LookAt(self, *args)
AnimaThirdPersonCamera_swigregister = _AnimaEngine.AnimaThirdPersonCamera_swigregister
AnimaThirdPersonCamera_swigregister(AnimaThirdPersonCamera)

class AnimaTexture(AnimaNamedObject):
    __swig_setmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaTexture, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaTexture, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaTexture(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaTexture
    __del__ = lambda self: None

    def GetID(self, index=0):
        return _AnimaEngine.AnimaTexture_GetID(self, index)

    def SetWidth(self, width):
        return _AnimaEngine.AnimaTexture_SetWidth(self, width)

    def GetWidth(self):
        return _AnimaEngine.AnimaTexture_GetWidth(self)

    def SetHeight(self, height):
        return _AnimaEngine.AnimaTexture_SetHeight(self, height)

    def GetHeight(self):
        return _AnimaEngine.AnimaTexture_GetHeight(self)

    def SetMipMapLevels(self, levels):
        return _AnimaEngine.AnimaTexture_SetMipMapLevels(self, levels)

    def GetMipMapLevels(self):
        return _AnimaEngine.AnimaTexture_GetMipMapLevels(self)

    def SetFormat(self, format):
        return _AnimaEngine.AnimaTexture_SetFormat(self, format)

    def GetFormat(self):
        return _AnimaEngine.AnimaTexture_GetFormat(self)

    def SetFilter(self, filter):
        return _AnimaEngine.AnimaTexture_SetFilter(self, filter)

    def GetFilter(self):
        return _AnimaEngine.AnimaTexture_GetFilter(self)

    def SetAttachment(self, attachment):
        return _AnimaEngine.AnimaTexture_SetAttachment(self, attachment)

    def GetAttachment(self):
        return _AnimaEngine.AnimaTexture_GetAttachment(self)

    def SetInternalFormat(self, internalFormat):
        return _AnimaEngine.AnimaTexture_SetInternalFormat(self, internalFormat)

    def GetInternalFormat(self):
        return _AnimaEngine.AnimaTexture_GetInternalFormat(self)

    def SetDataType(self, dataType):
        return _AnimaEngine.AnimaTexture_SetDataType(self, dataType)

    def GetDataType(self):
        return _AnimaEngine.AnimaTexture_GetDataType(self)

    def SetData(self, data, dataSize):
        return _AnimaEngine.AnimaTexture_SetData(self, data, dataSize)

    def GetData(self):
        return _AnimaEngine.AnimaTexture_GetData(self)

    def GetConstData(self):
        return _AnimaEngine.AnimaTexture_GetConstData(self)

    def SetTextureTarget(self, target):
        return _AnimaEngine.AnimaTexture_SetTextureTarget(self, target)

    def GetTextureTarget(self):
        return _AnimaEngine.AnimaTexture_GetTextureTarget(self)

    def SetClamp(self, clamp):
        return _AnimaEngine.AnimaTexture_SetClamp(self, clamp)

    def GetClamp(self):
        return _AnimaEngine.AnimaTexture_GetClamp(self)

    def Load(self):
        return _AnimaEngine.AnimaTexture_Load(self)

    def Unload(self):
        return _AnimaEngine.AnimaTexture_Unload(self)

    def LoadRenderTargets(self):
        return _AnimaEngine.AnimaTexture_LoadRenderTargets(self)

    def IsReady(self):
        return _AnimaEngine.AnimaTexture_IsReady(self)

    def AreRenderTargetsReady(self):
        return _AnimaEngine.AnimaTexture_AreRenderTargetsReady(self)

    def Resize(self, width, height):
        return _AnimaEngine.AnimaTexture_Resize(self, width, height)

    def Bind(self, unit):
        return _AnimaEngine.AnimaTexture_Bind(self, unit)

    def BindAsRenderTarget(self):
        return _AnimaEngine.AnimaTexture_BindAsRenderTarget(self)
AnimaTexture_swigregister = _AnimaEngine.AnimaTexture_swigregister
AnimaTexture_swigregister(AnimaTexture)

class AnimaGBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaGBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaGBuffer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaGBuffer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaGBuffer
    __del__ = lambda self: None

    def AddTexture(self, *args):
        return _AnimaEngine.AnimaGBuffer_AddTexture(self, *args)

    def Resize(self, width, height):
        return _AnimaEngine.AnimaGBuffer_Resize(self, width, height)

    def Create(self):
        return _AnimaEngine.AnimaGBuffer_Create(self)

    def Destroy(self):
        return _AnimaEngine.AnimaGBuffer_Destroy(self)

    def BindAsRenderTarget(self):
        return _AnimaEngine.AnimaGBuffer_BindAsRenderTarget(self)

    def GetTexture(self, *args):
        return _AnimaEngine.AnimaGBuffer_GetTexture(self, *args)
AnimaGBuffer_swigregister = _AnimaEngine.AnimaGBuffer_swigregister
AnimaGBuffer_swigregister(AnimaGBuffer)

class AnimaDataGenerator(AnimaNamedObject):
    __swig_setmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaDataGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaDataGenerator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimaEngine.delete_AnimaDataGenerator
    __del__ = lambda self: None

    def UpdateValue(self):
        return _AnimaEngine.AnimaDataGenerator_UpdateValue(self)

    def SetColor(self, *args):
        return _AnimaEngine.AnimaDataGenerator_SetColor(self, *args)

    def GetColor3f(self):
        return _AnimaEngine.AnimaDataGenerator_GetColor3f(self)

    def GetColor4f(self):
        return _AnimaEngine.AnimaDataGenerator_GetColor4f(self)

    def SetVector(self, *args):
        return _AnimaEngine.AnimaDataGenerator_SetVector(self, *args)

    def GetVector2f(self):
        return _AnimaEngine.AnimaDataGenerator_GetVector2f(self)

    def GetVector3f(self):
        return _AnimaEngine.AnimaDataGenerator_GetVector3f(self)

    def GetVector4f(self):
        return _AnimaEngine.AnimaDataGenerator_GetVector4f(self)

    def StopValueUpdate(self):
        return _AnimaEngine.AnimaDataGenerator_StopValueUpdate(self)

    def StartValueUpdate(self):
        return _AnimaEngine.AnimaDataGenerator_StartValueUpdate(self)

    def CanUpdateValue(self):
        return _AnimaEngine.AnimaDataGenerator_CanUpdateValue(self)
AnimaDataGenerator_swigregister = _AnimaEngine.AnimaDataGenerator_swigregister
AnimaDataGenerator_swigregister(AnimaDataGenerator)

class AnimaColorGenerator(AnimaDataGenerator):
    __swig_setmethods__ = {}
    for _s in [AnimaDataGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaColorGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaDataGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaColorGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaColorGenerator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaColorGenerator
    __del__ = lambda self: None

    def UpdateValue(self):
        return _AnimaEngine.AnimaColorGenerator_UpdateValue(self)

    def SetColor(self, *args):
        return _AnimaEngine.AnimaColorGenerator_SetColor(self, *args)

    def GetColor3f(self):
        return _AnimaEngine.AnimaColorGenerator_GetColor3f(self)

    def GetColor4f(self):
        return _AnimaEngine.AnimaColorGenerator_GetColor4f(self)
AnimaColorGenerator_swigregister = _AnimaEngine.AnimaColorGenerator_swigregister
AnimaColorGenerator_swigregister(AnimaColorGenerator)

class AnimaVectorGenerator(AnimaDataGenerator):
    __swig_setmethods__ = {}
    for _s in [AnimaDataGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaVectorGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaDataGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaVectorGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaVectorGenerator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaVectorGenerator
    __del__ = lambda self: None

    def UpdateValue(self):
        return _AnimaEngine.AnimaVectorGenerator_UpdateValue(self)

    def SetVector(self, *args):
        return _AnimaEngine.AnimaVectorGenerator_SetVector(self, *args)

    def GetVector2f(self):
        return _AnimaEngine.AnimaVectorGenerator_GetVector2f(self)

    def GetVector3f(self):
        return _AnimaEngine.AnimaVectorGenerator_GetVector3f(self)

    def GetVector4f(self):
        return _AnimaEngine.AnimaVectorGenerator_GetVector4f(self)
AnimaVectorGenerator_swigregister = _AnimaEngine.AnimaVectorGenerator_swigregister
AnimaVectorGenerator_swigregister(AnimaVectorGenerator)

class AnimaLight(AnimaSceneObject):
    __swig_setmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaLight, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaLight, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AnimaEngine.delete_AnimaLight
    __del__ = lambda self: None

    def SetColor(self, *args):
        return _AnimaEngine.AnimaLight_SetColor(self, *args)

    def GetColor(self):
        return _AnimaEngine.AnimaLight_GetColor(self)

    def SetIntensity(self, intensity):
        return _AnimaEngine.AnimaLight_SetIntensity(self, intensity)

    def GetIntensity(self):
        return _AnimaEngine.AnimaLight_GetIntensity(self)

    def SetDirection(self, *args):
        return _AnimaEngine.AnimaLight_SetDirection(self, *args)

    def GetDirection(self):
        return _AnimaEngine.AnimaLight_GetDirection(self)

    def SetConstantAttenuation(self, attenuation):
        return _AnimaEngine.AnimaLight_SetConstantAttenuation(self, attenuation)

    def SetLinearAttenuation(self, attenuation):
        return _AnimaEngine.AnimaLight_SetLinearAttenuation(self, attenuation)

    def SetExponentAttenuation(self, attenuation):
        return _AnimaEngine.AnimaLight_SetExponentAttenuation(self, attenuation)

    def GetConstantAttenuation(self):
        return _AnimaEngine.AnimaLight_GetConstantAttenuation(self)

    def GetLinearAttenuation(self):
        return _AnimaEngine.AnimaLight_GetLinearAttenuation(self)

    def GetExponentAttenuation(self):
        return _AnimaEngine.AnimaLight_GetExponentAttenuation(self)

    def SetRange(self, range):
        return _AnimaEngine.AnimaLight_SetRange(self, range)

    def GetRange(self):
        return _AnimaEngine.AnimaLight_GetRange(self)

    def SetCutoff(self, c):
        return _AnimaEngine.AnimaLight_SetCutoff(self, c)

    def GetCutoff(self):
        return _AnimaEngine.AnimaLight_GetCutoff(self)

    def ComputeLightMatrix(self, activeCamera):
        return _AnimaEngine.AnimaLight_ComputeLightMatrix(self, activeCamera)

    def GetShadowTexture(self):
        return _AnimaEngine.AnimaLight_GetShadowTexture(self)

    def GetTempShadowTexture(self):
        return _AnimaEngine.AnimaLight_GetTempShadowTexture(self)

    def GetViewMatrix(self):
        return _AnimaEngine.AnimaLight_GetViewMatrix(self)

    def GetProjectionMatrix(self):
        return _AnimaEngine.AnimaLight_GetProjectionMatrix(self)

    def GetProjectionViewMatrix(self):
        return _AnimaEngine.AnimaLight_GetProjectionViewMatrix(self)

    def GetFrustum(self):
        return _AnimaEngine.AnimaLight_GetFrustum(self)

    def UpdateMeshTransformation(self, meshTransformation):
        return _AnimaEngine.AnimaLight_UpdateMeshTransformation(self, meshTransformation)

    def UpdateCullFace(self, activeCamera):
        return _AnimaEngine.AnimaLight_UpdateCullFace(self, activeCamera)

    def GetShaderName(self):
        return _AnimaEngine.AnimaLight_GetShaderName(self)

    def CreateShader(self, shadersManager):
        return _AnimaEngine.AnimaLight_CreateShader(self, shadersManager)
AnimaLight_swigregister = _AnimaEngine.AnimaLight_swigregister
AnimaLight_swigregister(AnimaLight)

class AnimaDirectionalLight(AnimaLight):
    __swig_setmethods__ = {}
    for _s in [AnimaLight]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaDirectionalLight, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaLight]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaDirectionalLight, name)
    __repr__ = _swig_repr

    def __init__(self, allocator, dataGeneratorManager, name):
        this = _AnimaEngine.new_AnimaDirectionalLight(allocator, dataGeneratorManager, name)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaDirectionalLight
    __del__ = lambda self: None

    def SetDirection(self, *args):
        return _AnimaEngine.AnimaDirectionalLight_SetDirection(self, *args)

    def GetDirection(self):
        return _AnimaEngine.AnimaDirectionalLight_GetDirection(self)

    def ComputeLightMatrix(self, activeCamera):
        return _AnimaEngine.AnimaDirectionalLight_ComputeLightMatrix(self, activeCamera)

    def UpdateMeshTransformation(self, meshTransformation):
        return _AnimaEngine.AnimaDirectionalLight_UpdateMeshTransformation(self, meshTransformation)

    def UpdateCullFace(self, activeCamera):
        return _AnimaEngine.AnimaDirectionalLight_UpdateCullFace(self, activeCamera)

    def GetShaderPrefix(self):
        return _AnimaEngine.AnimaDirectionalLight_GetShaderPrefix(self)

    def GetShaderName(self):
        return _AnimaEngine.AnimaDirectionalLight_GetShaderName(self)

    def CreateShader(self, shadersManager):
        return _AnimaEngine.AnimaDirectionalLight_CreateShader(self, shadersManager)
AnimaDirectionalLight_swigregister = _AnimaEngine.AnimaDirectionalLight_swigregister
AnimaDirectionalLight_swigregister(AnimaDirectionalLight)

class AnimaPointLight(AnimaLight):
    __swig_setmethods__ = {}
    for _s in [AnimaLight]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaPointLight, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaLight]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaPointLight, name)
    __repr__ = _swig_repr

    def __init__(self, allocator, dataGeneratorManager, name):
        this = _AnimaEngine.new_AnimaPointLight(allocator, dataGeneratorManager, name)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaPointLight
    __del__ = lambda self: None

    def SetConstantAttenuation(self, attenuation):
        return _AnimaEngine.AnimaPointLight_SetConstantAttenuation(self, attenuation)

    def SetLinearAttenuation(self, attenuation):
        return _AnimaEngine.AnimaPointLight_SetLinearAttenuation(self, attenuation)

    def SetExponentAttenuation(self, attenuation):
        return _AnimaEngine.AnimaPointLight_SetExponentAttenuation(self, attenuation)

    def SetRange(self, range):
        return _AnimaEngine.AnimaPointLight_SetRange(self, range)

    def GetConstantAttenuation(self):
        return _AnimaEngine.AnimaPointLight_GetConstantAttenuation(self)

    def GetLinearAttenuation(self):
        return _AnimaEngine.AnimaPointLight_GetLinearAttenuation(self)

    def GetExponentAttenuation(self):
        return _AnimaEngine.AnimaPointLight_GetExponentAttenuation(self)

    def GetRange(self):
        return _AnimaEngine.AnimaPointLight_GetRange(self)

    def UpdateMeshTransformation(self, meshTransformation):
        return _AnimaEngine.AnimaPointLight_UpdateMeshTransformation(self, meshTransformation)

    def UpdateCullFace(self, activeCamera):
        return _AnimaEngine.AnimaPointLight_UpdateCullFace(self, activeCamera)

    def GetShaderPrefix(self):
        return _AnimaEngine.AnimaPointLight_GetShaderPrefix(self)

    def GetShaderName(self):
        return _AnimaEngine.AnimaPointLight_GetShaderName(self)

    def CreateShader(self, shadersManager):
        return _AnimaEngine.AnimaPointLight_CreateShader(self, shadersManager)
AnimaPointLight_swigregister = _AnimaEngine.AnimaPointLight_swigregister
AnimaPointLight_swigregister(AnimaPointLight)

class AnimaSpotLight(AnimaPointLight):
    __swig_setmethods__ = {}
    for _s in [AnimaPointLight]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaSpotLight, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaPointLight]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaSpotLight, name)
    __repr__ = _swig_repr

    def __init__(self, allocator, dataGeneratorManager, name):
        this = _AnimaEngine.new_AnimaSpotLight(allocator, dataGeneratorManager, name)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaSpotLight
    __del__ = lambda self: None

    def SetDirection(self, *args):
        return _AnimaEngine.AnimaSpotLight_SetDirection(self, *args)

    def SetCutoff(self, c):
        return _AnimaEngine.AnimaSpotLight_SetCutoff(self, c)

    def GetDirection(self):
        return _AnimaEngine.AnimaSpotLight_GetDirection(self)

    def GetCutoff(self):
        return _AnimaEngine.AnimaSpotLight_GetCutoff(self)

    def UpdateMeshTransformation(self, meshTransformation):
        return _AnimaEngine.AnimaSpotLight_UpdateMeshTransformation(self, meshTransformation)

    def UpdateCullFace(self, activeCamera):
        return _AnimaEngine.AnimaSpotLight_UpdateCullFace(self, activeCamera)

    def GetShaderPrefix(self):
        return _AnimaEngine.AnimaSpotLight_GetShaderPrefix(self)

    def GetShaderName(self):
        return _AnimaEngine.AnimaSpotLight_GetShaderName(self)

    def CreateShader(self, shadersManager):
        return _AnimaEngine.AnimaSpotLight_CreateShader(self, shadersManager)
AnimaSpotLight_swigregister = _AnimaEngine.AnimaSpotLight_swigregister
AnimaSpotLight_swigregister(AnimaSpotLight)

class AnimaHemisphereLight(AnimaLight):
    __swig_setmethods__ = {}
    for _s in [AnimaLight]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaHemisphereLight, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaLight]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaHemisphereLight, name)
    __repr__ = _swig_repr

    def __init__(self, allocator, dataGeneratorManager, name):
        this = _AnimaEngine.new_AnimaHemisphereLight(allocator, dataGeneratorManager, name)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaHemisphereLight
    __del__ = lambda self: None

    def SetSkyColor(self, *args):
        return _AnimaEngine.AnimaHemisphereLight_SetSkyColor(self, *args)

    def GetSkyColor(self):
        return _AnimaEngine.AnimaHemisphereLight_GetSkyColor(self)

    def SetGroundColor(self, *args):
        return _AnimaEngine.AnimaHemisphereLight_SetGroundColor(self, *args)

    def GetGroundColor(self):
        return _AnimaEngine.AnimaHemisphereLight_GetGroundColor(self)

    def UpdateMeshTransformation(self, meshTransformation):
        return _AnimaEngine.AnimaHemisphereLight_UpdateMeshTransformation(self, meshTransformation)

    def UpdateCullFace(self, activeCamera):
        return _AnimaEngine.AnimaHemisphereLight_UpdateCullFace(self, activeCamera)

    def GetShaderPrefix(self):
        return _AnimaEngine.AnimaHemisphereLight_GetShaderPrefix(self)

    def GetShaderName(self):
        return _AnimaEngine.AnimaHemisphereLight_GetShaderName(self)

    def CreateShader(self, shadersManager):
        return _AnimaEngine.AnimaHemisphereLight_CreateShader(self, shadersManager)
AnimaHemisphereLight_swigregister = _AnimaEngine.AnimaHemisphereLight_swigregister
AnimaHemisphereLight_swigregister(AnimaHemisphereLight)

class AnimaMaterial(AnimaMappedValues):
    __swig_setmethods__ = {}
    for _s in [AnimaMappedValues]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaMappedValues]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaMaterial(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaMaterial
    __del__ = lambda self: None

    def GetShaderPrefix(self):
        return _AnimaEngine.AnimaMaterial_GetShaderPrefix(self)
AnimaMaterial_swigregister = _AnimaEngine.AnimaMaterial_swigregister
AnimaMaterial_swigregister(AnimaMaterial)

class AnimaFace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaFace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaFace, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaFace(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaFace
    __del__ = lambda self: None

    def SetIndexes(self, *args):
        return _AnimaEngine.AnimaFace_SetIndexes(self, *args)

    def GetIndex(self, index):
        return _AnimaEngine.AnimaFace_GetIndex(self, index)

    def GetIndexes(self, *args):
        return _AnimaEngine.AnimaFace_GetIndexes(self, *args)

    def GetConstIndexes(self, *args):
        return _AnimaEngine.AnimaFace_GetConstIndexes(self, *args)

    def GetIndexesCount(self):
        return _AnimaEngine.AnimaFace_GetIndexesCount(self)

    def HasIndex(self, index):
        return _AnimaEngine.AnimaFace_HasIndex(self, index)

    def SetNormal(self, *args):
        return _AnimaEngine.AnimaFace_SetNormal(self, *args)

    def GetNormal(self):
        return _AnimaEngine.AnimaFace_GetNormal(self)
AnimaFace_swigregister = _AnimaEngine.AnimaFace_swigregister
AnimaFace_swigregister(AnimaFace)

class AnimaMeshBoneInfo(AnimaNamedObject):
    __swig_setmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaMeshBoneInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaMeshBoneInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaMeshBoneInfo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaMeshBoneInfo
    __del__ = lambda self: None

    def SetBoneOffset(self, boneOffset):
        return _AnimaEngine.AnimaMeshBoneInfo_SetBoneOffset(self, boneOffset)

    def GetBoneOffset(self):
        return _AnimaEngine.AnimaMeshBoneInfo_GetBoneOffset(self)

    def SetFinalTransformation(self, finalTransformation):
        return _AnimaEngine.AnimaMeshBoneInfo_SetFinalTransformation(self, finalTransformation)

    def GetFinalTransformation(self):
        return _AnimaEngine.AnimaMeshBoneInfo_GetFinalTransformation(self)
AnimaMeshBoneInfo_swigregister = _AnimaEngine.AnimaMeshBoneInfo_swigregister
AnimaMeshBoneInfo_swigregister(AnimaMeshBoneInfo)

class AnimaMesh(AnimaSceneObject):
    __swig_setmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaMesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaMesh(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaMesh
    __del__ = lambda self: None

    def __eq__(self, other):
        return _AnimaEngine.AnimaMesh___eq__(self, other)

    def __ne__(self, other):
        return _AnimaEngine.AnimaMesh___ne__(self, other)

    def Draw(self, renderer, program, updateMaterial=True):
        return _AnimaEngine.AnimaMesh_Draw(self, renderer, program, updateMaterial)

    def ClearAll(self):
        return _AnimaEngine.AnimaMesh_ClearAll(self)

    def MakePlane(self):
        return _AnimaEngine.AnimaMesh_MakePlane(self)

    def MakeIcosahedralSphere(self, recursionLevel=0):
        return _AnimaEngine.AnimaMesh_MakeIcosahedralSphere(self, recursionLevel)

    def MakeCylinder(self, topRadius=1.0, bottomRadius=1.0, height=1.0, radialSegments=8, heightSegments=1, openEnded=False):
        return _AnimaEngine.AnimaMesh_MakeCylinder(self, topRadius, bottomRadius, height, radialSegments, heightSegments, openEnded)

    def SetMaterial(self, material):
        return _AnimaEngine.AnimaMesh_SetMaterial(self, material)

    def GetMaterial(self):
        return _AnimaEngine.AnimaMesh_GetMaterial(self)

    def ComputeBoundingBox(self, updateRecursively):
        return _AnimaEngine.AnimaMesh_ComputeBoundingBox(self, updateRecursively)

    def GetBoundingBoxMin(self):
        return _AnimaEngine.AnimaMesh_GetBoundingBoxMin(self)

    def GetBoundingBoxMax(self):
        return _AnimaEngine.AnimaMesh_GetBoundingBoxMax(self)

    def GetBoundingBoxCenter(self):
        return _AnimaEngine.AnimaMesh_GetBoundingBoxCenter(self)

    def AddInstance(self, instance):
        return _AnimaEngine.AnimaMesh_AddInstance(self, instance)

    def GetInstancesCount(self):
        return _AnimaEngine.AnimaMesh_GetInstancesCount(self)

    def GetInstance(self, index):
        return _AnimaEngine.AnimaMesh_GetInstance(self, index)

    def GetInstanceFromName(self, *args):
        return _AnimaEngine.AnimaMesh_GetInstanceFromName(self, *args)

    def SetVertices(self, *args):
        return _AnimaEngine.AnimaMesh_SetVertices(self, *args)

    def AddVertex(self, v):
        return _AnimaEngine.AnimaMesh_AddVertex(self, v)

    def GetVerticesNumber(self):
        return _AnimaEngine.AnimaMesh_GetVerticesNumber(self)

    def GetVertex(self, index):
        return _AnimaEngine.AnimaMesh_GetVertex(self, index)

    def GetPVertex(self, index):
        return _AnimaEngine.AnimaMesh_GetPVertex(self, index)

    def GetVertices(self):
        return _AnimaEngine.AnimaMesh_GetVertices(self)

    def ClearVertices(self):
        return _AnimaEngine.AnimaMesh_ClearVertices(self)

    def SetNormals(self, *args):
        return _AnimaEngine.AnimaMesh_SetNormals(self, *args)

    def AddNormal(self, v):
        return _AnimaEngine.AnimaMesh_AddNormal(self, v)

    def GetNormalsNumber(self):
        return _AnimaEngine.AnimaMesh_GetNormalsNumber(self)

    def GetNormal(self, index):
        return _AnimaEngine.AnimaMesh_GetNormal(self, index)

    def GetPNormal(self, index):
        return _AnimaEngine.AnimaMesh_GetPNormal(self, index)

    def GetNormals(self):
        return _AnimaEngine.AnimaMesh_GetNormals(self)

    def ClearNormals(self):
        return _AnimaEngine.AnimaMesh_ClearNormals(self)

    def ComputeSmootNormals(self):
        return _AnimaEngine.AnimaMesh_ComputeSmootNormals(self)

    def ComputeFlatNormals(self):
        return _AnimaEngine.AnimaMesh_ComputeFlatNormals(self)

    def SetTextureCoords(self, *args):
        return _AnimaEngine.AnimaMesh_SetTextureCoords(self, *args)

    def AddTextureCoord(self, v):
        return _AnimaEngine.AnimaMesh_AddTextureCoord(self, v)

    def GetTextureCoordsNumber(self):
        return _AnimaEngine.AnimaMesh_GetTextureCoordsNumber(self)

    def GetTextureCoord(self, index):
        return _AnimaEngine.AnimaMesh_GetTextureCoord(self, index)

    def GetPTextureCoord(self, index):
        return _AnimaEngine.AnimaMesh_GetPTextureCoord(self, index)

    def GetTextureCoords(self):
        return _AnimaEngine.AnimaMesh_GetTextureCoords(self)

    def ClearTextureCoords(self):
        return _AnimaEngine.AnimaMesh_ClearTextureCoords(self)

    def SetTangents(self, *args):
        return _AnimaEngine.AnimaMesh_SetTangents(self, *args)

    def AddTangent(self, v):
        return _AnimaEngine.AnimaMesh_AddTangent(self, v)

    def GetTangentsNumber(self):
        return _AnimaEngine.AnimaMesh_GetTangentsNumber(self)

    def GetTangent(self, index):
        return _AnimaEngine.AnimaMesh_GetTangent(self, index)

    def GetPTangent(self, index):
        return _AnimaEngine.AnimaMesh_GetPTangent(self, index)

    def GetTangents(self):
        return _AnimaEngine.AnimaMesh_GetTangents(self)

    def ClearTangents(self):
        return _AnimaEngine.AnimaMesh_ClearTangents(self)

    def SetBitangents(self, *args):
        return _AnimaEngine.AnimaMesh_SetBitangents(self, *args)

    def AddBitangent(self, v):
        return _AnimaEngine.AnimaMesh_AddBitangent(self, v)

    def GetBitangentsNumber(self):
        return _AnimaEngine.AnimaMesh_GetBitangentsNumber(self)

    def GetBitangent(self, index):
        return _AnimaEngine.AnimaMesh_GetBitangent(self, index)

    def GetPBitangent(self, index):
        return _AnimaEngine.AnimaMesh_GetPBitangent(self, index)

    def GetBitangents(self):
        return _AnimaEngine.AnimaMesh_GetBitangents(self)

    def ClearBitangents(self):
        return _AnimaEngine.AnimaMesh_ClearBitangents(self)

    def SetBoneWeights(self, *args):
        return _AnimaEngine.AnimaMesh_SetBoneWeights(self, *args)

    def AddBoneWeight(self, v):
        return _AnimaEngine.AnimaMesh_AddBoneWeight(self, v)

    def GetBoneWeightsNumber(self):
        return _AnimaEngine.AnimaMesh_GetBoneWeightsNumber(self)

    def GetBoneWeight(self, index):
        return _AnimaEngine.AnimaMesh_GetBoneWeight(self, index)

    def GetPBoneWeight(self, index):
        return _AnimaEngine.AnimaMesh_GetPBoneWeight(self, index)

    def GetBoneWeights(self):
        return _AnimaEngine.AnimaMesh_GetBoneWeights(self)

    def ClearBoneWeights(self):
        return _AnimaEngine.AnimaMesh_ClearBoneWeights(self)

    def SetBoneIDs(self, *args):
        return _AnimaEngine.AnimaMesh_SetBoneIDs(self, *args)

    def AddBoneID(self, v):
        return _AnimaEngine.AnimaMesh_AddBoneID(self, v)

    def GetBoneIDsNumber(self):
        return _AnimaEngine.AnimaMesh_GetBoneIDsNumber(self)

    def GetBoneID(self, index):
        return _AnimaEngine.AnimaMesh_GetBoneID(self, index)

    def GetPBoneID(self, index):
        return _AnimaEngine.AnimaMesh_GetPBoneID(self, index)

    def GetBoneIDs(self):
        return _AnimaEngine.AnimaMesh_GetBoneIDs(self)

    def ClearBoneIDs(self):
        return _AnimaEngine.AnimaMesh_ClearBoneIDs(self)

    def SetFaces(self, *args):
        return _AnimaEngine.AnimaMesh_SetFaces(self, *args)

    def AddFace(self, face):
        return _AnimaEngine.AnimaMesh_AddFace(self, face)

    def GetFacesNumber(self):
        return _AnimaEngine.AnimaMesh_GetFacesNumber(self)

    def GetFace(self, index):
        return _AnimaEngine.AnimaMesh_GetFace(self, index)

    def GetPFace(self, index):
        return _AnimaEngine.AnimaMesh_GetPFace(self, index)

    def GetFaces(self):
        return _AnimaEngine.AnimaMesh_GetFaces(self)

    def ClearFaces(self):
        return _AnimaEngine.AnimaMesh_ClearFaces(self)

    def CreateBuffers(self):
        return _AnimaEngine.AnimaMesh_CreateBuffers(self)

    def UpdateBuffers(self):
        return _AnimaEngine.AnimaMesh_UpdateBuffers(self)

    def SetUpdateBuffers(self, bUpdate=True):
        return _AnimaEngine.AnimaMesh_SetUpdateBuffers(self, bUpdate)

    def NeedsBuffersUpdate(self):
        return _AnimaEngine.AnimaMesh_NeedsBuffersUpdate(self)

    def AreBuffersCreated(self):
        return _AnimaEngine.AnimaMesh_AreBuffersCreated(self)

    def CanCreateBuffers(self):
        return _AnimaEngine.AnimaMesh_CanCreateBuffers(self)

    def IsIndicesBufferCreated(self):
        return _AnimaEngine.AnimaMesh_IsIndicesBufferCreated(self)

    def IsVerticesBufferCreated(self):
        return _AnimaEngine.AnimaMesh_IsVerticesBufferCreated(self)

    def IsNormalsBufferCreated(self):
        return _AnimaEngine.AnimaMesh_IsNormalsBufferCreated(self)

    def IsTextureCoordsBufferCreated(self):
        return _AnimaEngine.AnimaMesh_IsTextureCoordsBufferCreated(self)

    def IsTangentsBufferCreated(self):
        return _AnimaEngine.AnimaMesh_IsTangentsBufferCreated(self)

    def IsBitangentsBufferCreated(self):
        return _AnimaEngine.AnimaMesh_IsBitangentsBufferCreated(self)

    def IsBoneWeightsBufferCreated(self):
        return _AnimaEngine.AnimaMesh_IsBoneWeightsBufferCreated(self)

    def IsBoneIDsBufferCreated(self):
        return _AnimaEngine.AnimaMesh_IsBoneIDsBufferCreated(self)

    def IsVertexArrayObjectCreated(self):
        return _AnimaEngine.AnimaMesh_IsVertexArrayObjectCreated(self)

    def CreateIndicesBuffer(self):
        return _AnimaEngine.AnimaMesh_CreateIndicesBuffer(self)

    def CreateVerticesBuffer(self):
        return _AnimaEngine.AnimaMesh_CreateVerticesBuffer(self)

    def CreateNormalsBuffer(self):
        return _AnimaEngine.AnimaMesh_CreateNormalsBuffer(self)

    def CreateTextureCoordsBuffer(self):
        return _AnimaEngine.AnimaMesh_CreateTextureCoordsBuffer(self)

    def CreateTangentsBuffer(self):
        return _AnimaEngine.AnimaMesh_CreateTangentsBuffer(self)

    def CreateBitangentsBuffer(self):
        return _AnimaEngine.AnimaMesh_CreateBitangentsBuffer(self)

    def CreateBoneWeightsBuffer(self):
        return _AnimaEngine.AnimaMesh_CreateBoneWeightsBuffer(self)

    def CreateBoneIDsBuffer(self):
        return _AnimaEngine.AnimaMesh_CreateBoneIDsBuffer(self)

    def CreateVertexArrayObject(self):
        return _AnimaEngine.AnimaMesh_CreateVertexArrayObject(self)

    def GetVertexArrayObject(self):
        return _AnimaEngine.AnimaMesh_GetVertexArrayObject(self)

    def GetIndexesBufferObject(self):
        return _AnimaEngine.AnimaMesh_GetIndexesBufferObject(self)

    def GetVerticesBufferObject(self):
        return _AnimaEngine.AnimaMesh_GetVerticesBufferObject(self)

    def GetNormalsBufferObject(self):
        return _AnimaEngine.AnimaMesh_GetNormalsBufferObject(self)

    def GetTextureCoordsBufferObject(self):
        return _AnimaEngine.AnimaMesh_GetTextureCoordsBufferObject(self)

    def GetTangentsBufferObject(self):
        return _AnimaEngine.AnimaMesh_GetTangentsBufferObject(self)

    def GetBitangentsBufferObject(self):
        return _AnimaEngine.AnimaMesh_GetBitangentsBufferObject(self)

    def GetBoneWeightsBufferObject(self):
        return _AnimaEngine.AnimaMesh_GetBoneWeightsBufferObject(self)

    def GetBoneIDsBufferObject(self):
        return _AnimaEngine.AnimaMesh_GetBoneIDsBufferObject(self)

    def GetFacesIndicesCount(self):
        return _AnimaEngine.AnimaMesh_GetFacesIndicesCount(self)

    def GetFacesIndices(self):
        return _AnimaEngine.AnimaMesh_GetFacesIndices(self)

    def GetFloatVerticesCount(self):
        return _AnimaEngine.AnimaMesh_GetFloatVerticesCount(self)

    def GetFloatVertices(self):
        return _AnimaEngine.AnimaMesh_GetFloatVertices(self)

    def GetFloatVerticesNormalCount(self):
        return _AnimaEngine.AnimaMesh_GetFloatVerticesNormalCount(self)

    def GetFloatVerticesNormal(self):
        return _AnimaEngine.AnimaMesh_GetFloatVerticesNormal(self)

    def GetFloatVerticesTextureCoordCount(self):
        return _AnimaEngine.AnimaMesh_GetFloatVerticesTextureCoordCount(self)

    def GetFloatVerticesTextureCoord(self):
        return _AnimaEngine.AnimaMesh_GetFloatVerticesTextureCoord(self)

    def GetFloatVerticesTangentsCount(self):
        return _AnimaEngine.AnimaMesh_GetFloatVerticesTangentsCount(self)

    def GetFloatVerticesTangents(self):
        return _AnimaEngine.AnimaMesh_GetFloatVerticesTangents(self)

    def GetFloatVerticesBitangentsCount(self):
        return _AnimaEngine.AnimaMesh_GetFloatVerticesBitangentsCount(self)

    def GetFloatVerticesBitangents(self):
        return _AnimaEngine.AnimaMesh_GetFloatVerticesBitangents(self)

    def GetFloatBoneWeightsCount(self):
        return _AnimaEngine.AnimaMesh_GetFloatBoneWeightsCount(self)

    def GetFloatBoneWeights(self):
        return _AnimaEngine.AnimaMesh_GetFloatBoneWeights(self)

    def GetFloatBoneIDsCount(self):
        return _AnimaEngine.AnimaMesh_GetFloatBoneIDsCount(self)

    def GetFloatBoneIDs(self):
        return _AnimaEngine.AnimaMesh_GetFloatBoneIDs(self)

    def SetIsVisible(self, visible):
        return _AnimaEngine.AnimaMesh_SetIsVisible(self, visible)

    def IsVisible(self):
        return _AnimaEngine.AnimaMesh_IsVisible(self)
AnimaMesh_swigregister = _AnimaEngine.AnimaMesh_swigregister
AnimaMesh_swigregister(AnimaMesh)

class AnimaModel(AnimaSceneObject):
    __swig_setmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaModel, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaModel
    __del__ = lambda self: None

    def SetMaterial(self, material):
        return _AnimaEngine.AnimaModel_SetMaterial(self, material)

    def GetMaterial(self):
        return _AnimaEngine.AnimaModel_GetMaterial(self)

    def GetMeshesCount(self):
        return _AnimaEngine.AnimaModel_GetMeshesCount(self)

    def AddMesh(self, mesh):
        return _AnimaEngine.AnimaModel_AddMesh(self, mesh)

    def GetMesh(self, index):
        return _AnimaEngine.AnimaModel_GetMesh(self, index)

    def GetMeshFromName(self, *args):
        return _AnimaEngine.AnimaModel_GetMeshFromName(self, *args)

    def GetAnimationsCount(self):
        return _AnimaEngine.AnimaModel_GetAnimationsCount(self)

    def SetAnimations(self, animations):
        return _AnimaEngine.AnimaModel_SetAnimations(self, animations)

    def AddAnimation(self, animation):
        return _AnimaEngine.AnimaModel_AddAnimation(self, animation)

    def GetAnimation(self, index):
        return _AnimaEngine.AnimaModel_GetAnimation(self, index)

    def SetOriginFileName(self, *args):
        return _AnimaEngine.AnimaModel_SetOriginFileName(self, *args)

    def GetAnimaOriginFileName(self):
        return _AnimaEngine.AnimaModel_GetAnimaOriginFileName(self)

    def GetOriginFileName(self):
        return _AnimaEngine.AnimaModel_GetOriginFileName(self)

    def SetAnimationNodeName(self, *args):
        return _AnimaEngine.AnimaModel_SetAnimationNodeName(self, *args)

    def GetAnimaAnimationNodeName(self):
        return _AnimaEngine.AnimaModel_GetAnimaAnimationNodeName(self)

    def GetAnimationNodeName(self):
        return _AnimaEngine.AnimaModel_GetAnimationNodeName(self)

    def GetMeshesBonesInfo(self):
        return _AnimaEngine.AnimaModel_GetMeshesBonesInfo(self)

    def SetMeshesBonesInfo(self, meshesBonesInfo):
        return _AnimaEngine.AnimaModel_SetMeshesBonesInfo(self, meshesBonesInfo)

    def ClearMeshesBonesInfo(self):
        return _AnimaEngine.AnimaModel_ClearMeshesBonesInfo(self)

    def UpdateAnimation(self, animationTime):
        return _AnimaEngine.AnimaModel_UpdateAnimation(self, animationTime)

    def SetActiveAnimation(self, animationIndex):
        return _AnimaEngine.AnimaModel_SetActiveAnimation(self, animationIndex)

    def StopAnimation(self):
        return _AnimaEngine.AnimaModel_StopAnimation(self)
AnimaModel_swigregister = _AnimaEngine.AnimaModel_swigregister
AnimaModel_swigregister(AnimaModel)

class AnimaModelInstance(AnimaSceneObject):
    __swig_setmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaModelInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaModelInstance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaModelInstance(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaModelInstance
    __del__ = lambda self: None

    def GetMeshesCount(self):
        return _AnimaEngine.AnimaModelInstance_GetMeshesCount(self)

    def GetMesh(self, index):
        return _AnimaEngine.AnimaModelInstance_GetMesh(self, index)

    def GetMeshes(self):
        return _AnimaEngine.AnimaModelInstance_GetMeshes(self)

    def GetModel(self):
        return _AnimaEngine.AnimaModelInstance_GetModel(self)
AnimaModelInstance_swigregister = _AnimaEngine.AnimaModelInstance_swigregister
AnimaModelInstance_swigregister(AnimaModelInstance)

class AnimaMeshInstance(AnimaSceneObject):
    __swig_setmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaMeshInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaSceneObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaMeshInstance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaMeshInstance(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaMeshInstance
    __del__ = lambda self: None

    def Draw(self, renderer, program, updateMaterial=True):
        return _AnimaEngine.AnimaMeshInstance_Draw(self, renderer, program, updateMaterial)

    def SetMaterial(self, material):
        return _AnimaEngine.AnimaMeshInstance_SetMaterial(self, material)

    def GetMaterial(self):
        return _AnimaEngine.AnimaMeshInstance_GetMaterial(self)

    def GetMesh(self):
        return _AnimaEngine.AnimaMeshInstance_GetMesh(self)
AnimaMeshInstance_swigregister = _AnimaEngine.AnimaMeshInstance_swigregister
AnimaMeshInstance_swigregister(AnimaMeshInstance)

class AnimaAnimation(AnimaNamedObject):
    __swig_setmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaAnimation, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaAnimation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaAnimation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaAnimation
    __del__ = lambda self: None

    def UpdateAnimation(self, model, time):
        return _AnimaEngine.AnimaAnimation_UpdateAnimation(self, model, time)

    def GetAnimationNodesCount(self):
        return _AnimaEngine.AnimaAnimation_GetAnimationNodesCount(self)

    def CreateAnimationNode(self, *args):
        return _AnimaEngine.AnimaAnimation_CreateAnimationNode(self, *args)

    def GetAnimationNode(self, index):
        return _AnimaEngine.AnimaAnimation_GetAnimationNode(self, index)

    def GetAnimationNodes(self):
        return _AnimaEngine.AnimaAnimation_GetAnimationNodes(self)

    def ClearAnimationNodes(self):
        return _AnimaEngine.AnimaAnimation_ClearAnimationNodes(self)

    def SetDuration(self, duration):
        return _AnimaEngine.AnimaAnimation_SetDuration(self, duration)

    def GetDuration(self):
        return _AnimaEngine.AnimaAnimation_GetDuration(self)

    def SetTicksPerSecond(self, ticksPerSecond):
        return _AnimaEngine.AnimaAnimation_SetTicksPerSecond(self, ticksPerSecond)

    def GetTicksPerSecond(self):
        return _AnimaEngine.AnimaAnimation_GetTicksPerSecond(self)
AnimaAnimation_swigregister = _AnimaEngine.AnimaAnimation_swigregister
AnimaAnimation_swigregister(AnimaAnimation)

class AnimaAnimationNode(AnimaNamedObject):
    __swig_setmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaAnimationNode, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimaNamedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaAnimationNode, name)
    __repr__ = _swig_repr

    def __init__(self, name, allocator):
        this = _AnimaEngine.new_AnimaAnimationNode(name, allocator)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaAnimationNode
    __del__ = lambda self: None

    def ComputeInterpolatedScaling(self, animationTime):
        return _AnimaEngine.AnimaAnimationNode_ComputeInterpolatedScaling(self, animationTime)

    def ComputeInterpolatedRotation(self, animationTime):
        return _AnimaEngine.AnimaAnimationNode_ComputeInterpolatedRotation(self, animationTime)

    def ComputeInterpolatedPosition(self, animationTime):
        return _AnimaEngine.AnimaAnimationNode_ComputeInterpolatedPosition(self, animationTime)

    def FindScaling(self, animationTime):
        return _AnimaEngine.AnimaAnimationNode_FindScaling(self, animationTime)

    def FindRotation(self, animationTime):
        return _AnimaEngine.AnimaAnimationNode_FindRotation(self, animationTime)

    def FindPosition(self, animationTime):
        return _AnimaEngine.AnimaAnimationNode_FindPosition(self, animationTime)

    def GetPositionKeysCount(self):
        return _AnimaEngine.AnimaAnimationNode_GetPositionKeysCount(self)

    def AddPositionKey(self, key):
        return _AnimaEngine.AnimaAnimationNode_AddPositionKey(self, key)

    def GetPositionKey(self, index):
        return _AnimaEngine.AnimaAnimationNode_GetPositionKey(self, index)

    def GetPositionKeys(self):
        return _AnimaEngine.AnimaAnimationNode_GetPositionKeys(self)

    def ClearPositionKeys(self):
        return _AnimaEngine.AnimaAnimationNode_ClearPositionKeys(self)

    def GetRotationKeysCount(self):
        return _AnimaEngine.AnimaAnimationNode_GetRotationKeysCount(self)

    def AddRotationKey(self, key):
        return _AnimaEngine.AnimaAnimationNode_AddRotationKey(self, key)

    def GetRotationKey(self, index):
        return _AnimaEngine.AnimaAnimationNode_GetRotationKey(self, index)

    def GetRotationKeys(self):
        return _AnimaEngine.AnimaAnimationNode_GetRotationKeys(self)

    def ClearRotationKeys(self):
        return _AnimaEngine.AnimaAnimationNode_ClearRotationKeys(self)

    def GetScalingKeysCount(self):
        return _AnimaEngine.AnimaAnimationNode_GetScalingKeysCount(self)

    def AddScalingKey(self, key):
        return _AnimaEngine.AnimaAnimationNode_AddScalingKey(self, key)

    def GetScalingKey(self, index):
        return _AnimaEngine.AnimaAnimationNode_GetScalingKey(self, index)

    def GetScalingKeys(self):
        return _AnimaEngine.AnimaAnimationNode_GetScalingKeys(self)

    def ClearScalingKeys(self):
        return _AnimaEngine.AnimaAnimationNode_ClearScalingKeys(self)
AnimaAnimationNode_swigregister = _AnimaEngine.AnimaAnimationNode_swigregister
AnimaAnimationNode_swigregister(AnimaAnimationNode)

class AnimaAnimationPositionKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaAnimationPositionKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaAnimationPositionKey, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaAnimationPositionKey(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaAnimationPositionKey
    __del__ = lambda self: None

    def SetTime(self, time):
        return _AnimaEngine.AnimaAnimationPositionKey_SetTime(self, time)

    def GetTime(self):
        return _AnimaEngine.AnimaAnimationPositionKey_GetTime(self)

    def SetValue(self, value):
        return _AnimaEngine.AnimaAnimationPositionKey_SetValue(self, value)

    def GetValue(self):
        return _AnimaEngine.AnimaAnimationPositionKey_GetValue(self)
AnimaAnimationPositionKey_swigregister = _AnimaEngine.AnimaAnimationPositionKey_swigregister
AnimaAnimationPositionKey_swigregister(AnimaAnimationPositionKey)

class AnimaAnimationRotationKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaAnimationRotationKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaAnimationRotationKey, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaAnimationRotationKey(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaAnimationRotationKey
    __del__ = lambda self: None

    def SetTime(self, time):
        return _AnimaEngine.AnimaAnimationRotationKey_SetTime(self, time)

    def GetTime(self):
        return _AnimaEngine.AnimaAnimationRotationKey_GetTime(self)

    def SetValue(self, value):
        return _AnimaEngine.AnimaAnimationRotationKey_SetValue(self, value)

    def GetValue(self):
        return _AnimaEngine.AnimaAnimationRotationKey_GetValue(self)
AnimaAnimationRotationKey_swigregister = _AnimaEngine.AnimaAnimationRotationKey_swigregister
AnimaAnimationRotationKey_swigregister(AnimaAnimationRotationKey)

class AnimaAnimationScalingKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaAnimationScalingKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaAnimationScalingKey, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaAnimationScalingKey(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaAnimationScalingKey
    __del__ = lambda self: None

    def SetTime(self, time):
        return _AnimaEngine.AnimaAnimationScalingKey_SetTime(self, time)

    def GetTime(self):
        return _AnimaEngine.AnimaAnimationScalingKey_GetTime(self)

    def SetValue(self, value):
        return _AnimaEngine.AnimaAnimationScalingKey_SetValue(self, value)

    def GetValue(self):
        return _AnimaEngine.AnimaAnimationScalingKey_GetValue(self)
AnimaAnimationScalingKey_swigregister = _AnimaEngine.AnimaAnimationScalingKey_swigregister
AnimaAnimationScalingKey_swigregister(AnimaAnimationScalingKey)

class AnimaMeshCreator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaMeshCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaMeshCreator, name)
    __repr__ = _swig_repr
    __swig_getmethods__["MakePlane"] = lambda x: _AnimaEngine.AnimaMeshCreator_MakePlane
    if _newclass:
        MakePlane = staticmethod(_AnimaEngine.AnimaMeshCreator_MakePlane)
    __swig_getmethods__["MakeCylinder"] = lambda x: _AnimaEngine.AnimaMeshCreator_MakeCylinder
    if _newclass:
        MakeCylinder = staticmethod(_AnimaEngine.AnimaMeshCreator_MakeCylinder)
    __swig_getmethods__["MakeIcosahedralSphere"] = lambda x: _AnimaEngine.AnimaMeshCreator_MakeIcosahedralSphere
    if _newclass:
        MakeIcosahedralSphere = staticmethod(_AnimaEngine.AnimaMeshCreator_MakeIcosahedralSphere)

    def __init__(self):
        this = _AnimaEngine.new_AnimaMeshCreator()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaMeshCreator
    __del__ = lambda self: None
AnimaMeshCreator_swigregister = _AnimaEngine.AnimaMeshCreator_swigregister
AnimaMeshCreator_swigregister(AnimaMeshCreator)

def AnimaMeshCreator_MakePlane(mesh, allocator):
    return _AnimaEngine.AnimaMeshCreator_MakePlane(mesh, allocator)
AnimaMeshCreator_MakePlane = _AnimaEngine.AnimaMeshCreator_MakePlane

def AnimaMeshCreator_MakeCylinder(mesh, topRadius, bottomRadius, height, radialSegments, heightSegments, openEnded, allocator):
    return _AnimaEngine.AnimaMeshCreator_MakeCylinder(mesh, topRadius, bottomRadius, height, radialSegments, heightSegments, openEnded, allocator)
AnimaMeshCreator_MakeCylinder = _AnimaEngine.AnimaMeshCreator_MakeCylinder

def AnimaMeshCreator_MakeIcosahedralSphere(mesh, recursionLevel, allocator):
    return _AnimaEngine.AnimaMeshCreator_MakeIcosahedralSphere(mesh, recursionLevel, allocator)
AnimaMeshCreator_MakeIcosahedralSphere = _AnimaEngine.AnimaMeshCreator_MakeIcosahedralSphere

class AnimaShader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaShader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaShader, name)
    __repr__ = _swig_repr
    INVALID = _AnimaEngine.AnimaShader_INVALID
    VERTEX = _AnimaEngine.AnimaShader_VERTEX
    TESSELLATION_CONTROL = _AnimaEngine.AnimaShader_TESSELLATION_CONTROL
    TESSELLATION_EVALUATION = _AnimaEngine.AnimaShader_TESSELLATION_EVALUATION
    GEOMETRY = _AnimaEngine.AnimaShader_GEOMETRY
    FRAGMENT = _AnimaEngine.AnimaShader_FRAGMENT

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaShader(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaShader
    __del__ = lambda self: None

    def __eq__(self, left):
        return _AnimaEngine.AnimaShader___eq__(self, left)

    def __ne__(self, left):
        return _AnimaEngine.AnimaShader___ne__(self, left)

    def SetText(self, *args):
        return _AnimaEngine.AnimaShader_SetText(self, *args)

    def GetAnimaText(self):
        return _AnimaEngine.AnimaShader_GetAnimaText(self)

    def GetText(self):
        return _AnimaEngine.AnimaShader_GetText(self)

    def SetType(self, type):
        return _AnimaEngine.AnimaShader_SetType(self, type)

    def GetType(self):
        return _AnimaEngine.AnimaShader_GetType(self)

    def Create(self):
        return _AnimaEngine.AnimaShader_Create(self)

    def Delete(self):
        return _AnimaEngine.AnimaShader_Delete(self)

    def Compile(self):
        return _AnimaEngine.AnimaShader_Compile(self)

    def IsCreated(self):
        return _AnimaEngine.AnimaShader_IsCreated(self)

    def IsCompiled(self):
        return _AnimaEngine.AnimaShader_IsCompiled(self)

    def GetID(self):
        return _AnimaEngine.AnimaShader_GetID(self)
AnimaShader_swigregister = _AnimaEngine.AnimaShader_swigregister
AnimaShader_swigregister(AnimaShader)

class AnimaShaderProgram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaShaderProgram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaShaderProgram, name)
    __repr__ = _swig_repr
    SHADER_FILE = _AnimaEngine.AnimaShaderProgram_SHADER_FILE
    SHADER_TEXT = _AnimaEngine.AnimaShaderProgram_SHADER_TEXT

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaShaderProgram(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaShaderProgram
    __del__ = lambda self: None

    def __eq__(self, left):
        return _AnimaEngine.AnimaShaderProgram___eq__(self, left)

    def __ne__(self, left):
        return _AnimaEngine.AnimaShaderProgram___ne__(self, left)

    def AddShader(self, shader):
        return _AnimaEngine.AnimaShaderProgram_AddShader(self, shader)

    def SetShaders(self, shaders, count):
        return _AnimaEngine.AnimaShaderProgram_SetShaders(self, shaders, count)

    def CompileShaders(self):
        return _AnimaEngine.AnimaShaderProgram_CompileShaders(self)

    def ClearShaders(self):
        return _AnimaEngine.AnimaShaderProgram_ClearShaders(self)

    def Create(self):
        return _AnimaEngine.AnimaShaderProgram_Create(self)

    def Link(self):
        return _AnimaEngine.AnimaShaderProgram_Link(self)

    def Use(self):
        return _AnimaEngine.AnimaShaderProgram_Use(self)

    def Delete(self):
        return _AnimaEngine.AnimaShaderProgram_Delete(self)

    def IsCreated(self):
        return _AnimaEngine.AnimaShaderProgram_IsCreated(self)

    def IsLinked(self):
        return _AnimaEngine.AnimaShaderProgram_IsLinked(self)

    def GetID(self):
        return _AnimaEngine.AnimaShaderProgram_GetID(self)

    def ScanVariables(self):
        return _AnimaEngine.AnimaShaderProgram_ScanVariables(self)

    def EnableInputs(self, mesh):
        return _AnimaEngine.AnimaShaderProgram_EnableInputs(self, mesh)

    def EnableInput(self, *args):
        return _AnimaEngine.AnimaShaderProgram_EnableInput(self, *args)

    def DisableInputs(self):
        return _AnimaEngine.AnimaShaderProgram_DisableInputs(self)

    def UpdateSceneObjectProperties(self, object, renderingManager):
        return _AnimaEngine.AnimaShaderProgram_UpdateSceneObjectProperties(self, object, renderingManager)

    def UpdateMappedValuesObjectProperties(self, object, renderingManager):
        return _AnimaEngine.AnimaShaderProgram_UpdateMappedValuesObjectProperties(self, object, renderingManager)

    def UpdateRenderingManagerProperies(self, renderingManager):
        return _AnimaEngine.AnimaShaderProgram_UpdateRenderingManagerProperies(self, renderingManager)

    def SetUniformi(self, *args):
        return _AnimaEngine.AnimaShaderProgram_SetUniformi(self, *args)

    def SetUniformf(self, *args):
        return _AnimaEngine.AnimaShaderProgram_SetUniformf(self, *args)

    def SetUniform(self, *args):
        return _AnimaEngine.AnimaShaderProgram_SetUniform(self, *args)
AnimaShaderProgram_swigregister = _AnimaEngine.AnimaShaderProgram_swigregister
AnimaShaderProgram_swigregister(AnimaShaderProgram)

class AnimaScene(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaScene, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaScene, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaScene(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaScene
    __del__ = lambda self: None

    def Initialize(self):
        return _AnimaEngine.AnimaScene_Initialize(self)

    def Terminate(self):
        return _AnimaEngine.AnimaScene_Terminate(self)

    def GetEngine(self):
        return _AnimaEngine.AnimaScene_GetEngine(self)

    def GetModelsManager(self):
        return _AnimaEngine.AnimaScene_GetModelsManager(self)

    def GetMeshesManager(self):
        return _AnimaEngine.AnimaScene_GetMeshesManager(self)

    def GetModelInstancesManager(self):
        return _AnimaEngine.AnimaScene_GetModelInstancesManager(self)

    def GetMeshInstancesManager(self):
        return _AnimaEngine.AnimaScene_GetMeshInstancesManager(self)

    def GetShadersManager(self):
        return _AnimaEngine.AnimaScene_GetShadersManager(self)

    def GetCamerasManager(self):
        return _AnimaEngine.AnimaScene_GetCamerasManager(self)

    def GetTexturesManager(self):
        return _AnimaEngine.AnimaScene_GetTexturesManager(self)

    def GetDataGeneratorsManager(self):
        return _AnimaEngine.AnimaScene_GetDataGeneratorsManager(self)

    def GetMaterialsManager(self):
        return _AnimaEngine.AnimaScene_GetMaterialsManager(self)

    def GetLightsManager(self):
        return _AnimaEngine.AnimaScene_GetLightsManager(self)

    def GetAnimationsManager(self):
        return _AnimaEngine.AnimaScene_GetAnimationsManager(self)

    def GetMeshesAllocator(self):
        return _AnimaEngine.AnimaScene_GetMeshesAllocator(self)

    def GetModelsAllocator(self):
        return _AnimaEngine.AnimaScene_GetModelsAllocator(self)

    def GetModelInstancesAllocator(self):
        return _AnimaEngine.AnimaScene_GetModelInstancesAllocator(self)

    def GetMeshInstancesAllocator(self):
        return _AnimaEngine.AnimaScene_GetMeshInstancesAllocator(self)

    def GetGenericAllocator(self):
        return _AnimaEngine.AnimaScene_GetGenericAllocator(self)

    def GetStringAllocator(self):
        return _AnimaEngine.AnimaScene_GetStringAllocator(self)

    def GetShadersAllocator(self):
        return _AnimaEngine.AnimaScene_GetShadersAllocator(self)

    def GetCamerasAllocator(self):
        return _AnimaEngine.AnimaScene_GetCamerasAllocator(self)

    def GetTexturesAllocator(self):
        return _AnimaEngine.AnimaScene_GetTexturesAllocator(self)

    def GetMaterialsAllocator(self):
        return _AnimaEngine.AnimaScene_GetMaterialsAllocator(self)

    def GetLightsAllocator(self):
        return _AnimaEngine.AnimaScene_GetLightsAllocator(self)

    def GetDataGeneratorsAllocator(self):
        return _AnimaEngine.AnimaScene_GetDataGeneratorsAllocator(self)

    def GetAnimationsAllocator(self):
        return _AnimaEngine.AnimaScene_GetAnimationsAllocator(self)
AnimaScene_swigregister = _AnimaEngine.AnimaScene_swigregister
AnimaScene_swigregister(AnimaScene)

class AnimaDataGeneratorsManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaDataGeneratorsManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaDataGeneratorsManager, name)
    __repr__ = _swig_repr

    def __init__(self, scene, engine=None):
        this = _AnimaEngine.new_AnimaDataGeneratorsManager(scene, engine)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaDataGeneratorsManager
    __del__ = lambda self: None

    def CreateColorGenerator(self, *args):
        return _AnimaEngine.AnimaDataGeneratorsManager_CreateColorGenerator(self, *args)

    def CreateVectorGenerator(self, *args):
        return _AnimaEngine.AnimaDataGeneratorsManager_CreateVectorGenerator(self, *args)

    def RemoveGenerator(self, *args):
        return _AnimaEngine.AnimaDataGeneratorsManager_RemoveGenerator(self, *args)

    def GetGenerator(self, *args):
        return _AnimaEngine.AnimaDataGeneratorsManager_GetGenerator(self, *args)

    def GetTotalDataGeneratorsCount(self):
        return _AnimaEngine.AnimaDataGeneratorsManager_GetTotalDataGeneratorsCount(self)

    def GetDataGeneratorsTypeMappedArray(self):
        return _AnimaEngine.AnimaDataGeneratorsManager_GetDataGeneratorsTypeMappedArray(self)

    def UpdateValues(self):
        return _AnimaEngine.AnimaDataGeneratorsManager_UpdateValues(self)
AnimaDataGeneratorsManager_swigregister = _AnimaEngine.AnimaDataGeneratorsManager_swigregister
AnimaDataGeneratorsManager_swigregister(AnimaDataGeneratorsManager)

class AnimaLightsManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaLightsManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaLightsManager, name)
    __repr__ = _swig_repr

    def __init__(self, scene):
        this = _AnimaEngine.new_AnimaLightsManager(scene)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaLightsManager
    __del__ = lambda self: None

    def CreateDirectionalLight(self, *args):
        return _AnimaEngine.AnimaLightsManager_CreateDirectionalLight(self, *args)

    def CreatePointLight(self, *args):
        return _AnimaEngine.AnimaLightsManager_CreatePointLight(self, *args)

    def CreateSpotLight(self, *args):
        return _AnimaEngine.AnimaLightsManager_CreateSpotLight(self, *args)

    def GetLightFromName(self, *args):
        return _AnimaEngine.AnimaLightsManager_GetLightFromName(self, *args)

    def GetTotalLightsCount(self):
        return _AnimaEngine.AnimaLightsManager_GetTotalLightsCount(self)

    def GetLights(self):
        return _AnimaEngine.AnimaLightsManager_GetLights(self)

    def UpdateLightsMatrix(self, activeCamera):
        return _AnimaEngine.AnimaLightsManager_UpdateLightsMatrix(self, activeCamera)
AnimaLightsManager_swigregister = _AnimaEngine.AnimaLightsManager_swigregister
AnimaLightsManager_swigregister(AnimaLightsManager)

class AnimaCamerasManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaCamerasManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaCamerasManager, name)
    __repr__ = _swig_repr

    def __init__(self, scene):
        this = _AnimaEngine.new_AnimaCamerasManager(scene)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaCamerasManager
    __del__ = lambda self: None

    def CreateFirstPersonCamera(self, *args):
        return _AnimaEngine.AnimaCamerasManager_CreateFirstPersonCamera(self, *args)

    def CreateThirdPersonCamera(self, *args):
        return _AnimaEngine.AnimaCamerasManager_CreateThirdPersonCamera(self, *args)

    def GetActiveCamera(self):
        return _AnimaEngine.AnimaCamerasManager_GetActiveCamera(self)

    def GetCameraFromName(self, *args):
        return _AnimaEngine.AnimaCamerasManager_GetCameraFromName(self, *args)

    def GetTotalCamerasCount(self):
        return _AnimaEngine.AnimaCamerasManager_GetTotalCamerasCount(self)

    def GetCameras(self):
        return _AnimaEngine.AnimaCamerasManager_GetCameras(self)

    def UpdatePerspectiveCameras(self, fov, size, zNear, zFar):
        return _AnimaEngine.AnimaCamerasManager_UpdatePerspectiveCameras(self, fov, size, zNear, zFar)

    def UpdateOrthoCameras(self, left, right, bottom, top, zNear, zFar):
        return _AnimaEngine.AnimaCamerasManager_UpdateOrthoCameras(self, left, right, bottom, top, zNear, zFar)
AnimaCamerasManager_swigregister = _AnimaEngine.AnimaCamerasManager_swigregister
AnimaCamerasManager_swigregister(AnimaCamerasManager)

class AnimaTGAHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaTGAHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaTGAHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Header"] = _AnimaEngine.AnimaTGAHeader_Header_set
    __swig_getmethods__["Header"] = _AnimaEngine.AnimaTGAHeader_Header_get
    if _newclass:
        Header = _swig_property(_AnimaEngine.AnimaTGAHeader_Header_get, _AnimaEngine.AnimaTGAHeader_Header_set)

    def __init__(self):
        this = _AnimaEngine.new_AnimaTGAHeader()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaTGAHeader
    __del__ = lambda self: None
AnimaTGAHeader_swigregister = _AnimaEngine.AnimaTGAHeader_swigregister
AnimaTGAHeader_swigregister(AnimaTGAHeader)

class AnimaTGA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaTGA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaTGA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _AnimaEngine.AnimaTGA_header_set
    __swig_getmethods__["header"] = _AnimaEngine.AnimaTGA_header_get
    if _newclass:
        header = _swig_property(_AnimaEngine.AnimaTGA_header_get, _AnimaEngine.AnimaTGA_header_set)
    __swig_setmethods__["bytesPerPixel"] = _AnimaEngine.AnimaTGA_bytesPerPixel_set
    __swig_getmethods__["bytesPerPixel"] = _AnimaEngine.AnimaTGA_bytesPerPixel_get
    if _newclass:
        bytesPerPixel = _swig_property(_AnimaEngine.AnimaTGA_bytesPerPixel_get, _AnimaEngine.AnimaTGA_bytesPerPixel_set)
    __swig_setmethods__["imageSize"] = _AnimaEngine.AnimaTGA_imageSize_set
    __swig_getmethods__["imageSize"] = _AnimaEngine.AnimaTGA_imageSize_get
    if _newclass:
        imageSize = _swig_property(_AnimaEngine.AnimaTGA_imageSize_get, _AnimaEngine.AnimaTGA_imageSize_set)
    __swig_setmethods__["temp"] = _AnimaEngine.AnimaTGA_temp_set
    __swig_getmethods__["temp"] = _AnimaEngine.AnimaTGA_temp_get
    if _newclass:
        temp = _swig_property(_AnimaEngine.AnimaTGA_temp_get, _AnimaEngine.AnimaTGA_temp_set)
    __swig_setmethods__["type"] = _AnimaEngine.AnimaTGA_type_set
    __swig_getmethods__["type"] = _AnimaEngine.AnimaTGA_type_get
    if _newclass:
        type = _swig_property(_AnimaEngine.AnimaTGA_type_get, _AnimaEngine.AnimaTGA_type_set)
    __swig_setmethods__["Height"] = _AnimaEngine.AnimaTGA_Height_set
    __swig_getmethods__["Height"] = _AnimaEngine.AnimaTGA_Height_get
    if _newclass:
        Height = _swig_property(_AnimaEngine.AnimaTGA_Height_get, _AnimaEngine.AnimaTGA_Height_set)
    __swig_setmethods__["Width"] = _AnimaEngine.AnimaTGA_Width_set
    __swig_getmethods__["Width"] = _AnimaEngine.AnimaTGA_Width_get
    if _newclass:
        Width = _swig_property(_AnimaEngine.AnimaTGA_Width_get, _AnimaEngine.AnimaTGA_Width_set)
    __swig_setmethods__["Bpp"] = _AnimaEngine.AnimaTGA_Bpp_set
    __swig_getmethods__["Bpp"] = _AnimaEngine.AnimaTGA_Bpp_get
    if _newclass:
        Bpp = _swig_property(_AnimaEngine.AnimaTGA_Bpp_get, _AnimaEngine.AnimaTGA_Bpp_set)

    def __init__(self):
        this = _AnimaEngine.new_AnimaTGA()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaTGA
    __del__ = lambda self: None
AnimaTGA_swigregister = _AnimaEngine.AnimaTGA_swigregister
AnimaTGA_swigregister(AnimaTGA)

class AnimaTexturesManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaTexturesManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaTexturesManager, name)
    __repr__ = _swig_repr

    def __init__(self, scene):
        this = _AnimaEngine.new_AnimaTexturesManager(scene)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaTexturesManager
    __del__ = lambda self: None

    def LoadTextureFromFile(self, *args):
        return _AnimaEngine.AnimaTexturesManager_LoadTextureFromFile(self, *args)

    def LoadTextureFromBMPFile(self, *args):
        return _AnimaEngine.AnimaTexturesManager_LoadTextureFromBMPFile(self, *args)

    def LoadTextureFromTGAFile(self, *args):
        return _AnimaEngine.AnimaTexturesManager_LoadTextureFromTGAFile(self, *args)

    def LoadTextureFromDDSFile(self, *args):
        return _AnimaEngine.AnimaTexturesManager_LoadTextureFromDDSFile(self, *args)

    def LoadTextureFromData(self, *args):
        return _AnimaEngine.AnimaTexturesManager_LoadTextureFromData(self, *args)

    def GetTexturesCount(self):
        return _AnimaEngine.AnimaTexturesManager_GetTexturesCount(self)

    def GetTexture(self, *args):
        return _AnimaEngine.AnimaTexturesManager_GetTexture(self, *args)

    def CreateTexture(self, *args):
        return _AnimaEngine.AnimaTexturesManager_CreateTexture(self, *args)
AnimaTexturesManager_swigregister = _AnimaEngine.AnimaTexturesManager_swigregister
AnimaTexturesManager_swigregister(AnimaTexturesManager)

class AnimaMaterialsManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaMaterialsManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaMaterialsManager, name)
    __repr__ = _swig_repr

    def __init__(self, scene, texturesManager):
        this = _AnimaEngine.new_AnimaMaterialsManager(scene, texturesManager)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaMaterialsManager
    __del__ = lambda self: None

    def CreateGenericMaterial(self, *args):
        return _AnimaEngine.AnimaMaterialsManager_CreateGenericMaterial(self, *args)

    def GetMaterial(self, index):
        return _AnimaEngine.AnimaMaterialsManager_GetMaterial(self, index)

    def GetMaterialFromName(self, *args):
        return _AnimaEngine.AnimaMaterialsManager_GetMaterialFromName(self, *args)

    def GetTotalMaterialsCount(self):
        return _AnimaEngine.AnimaMaterialsManager_GetTotalMaterialsCount(self)

    def GetMaterials(self):
        return _AnimaEngine.AnimaMaterialsManager_GetMaterials(self)

    def LoadMaterialsFromModel(self, scene, modelName):
        return _AnimaEngine.AnimaMaterialsManager_LoadMaterialsFromModel(self, scene, modelName)

    def GetLastMaterialsIndexMap(self):
        return _AnimaEngine.AnimaMaterialsManager_GetLastMaterialsIndexMap(self)

    def ClearLastMaterialsIndexMap(self):
        return _AnimaEngine.AnimaMaterialsManager_ClearLastMaterialsIndexMap(self)
AnimaMaterialsManager_swigregister = _AnimaEngine.AnimaMaterialsManager_swigregister
AnimaMaterialsManager_swigregister(AnimaMaterialsManager)

class AnimaShadersManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaShadersManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaShadersManager, name)
    __repr__ = _swig_repr

    def __init__(self, engine):
        this = _AnimaEngine.new_AnimaShadersManager(engine)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaShadersManager
    __del__ = lambda self: None

    def LoadShaderFromFile(self, *args):
        return _AnimaEngine.AnimaShadersManager_LoadShaderFromFile(self, *args)

    def LoadShader(self, *args):
        return _AnimaEngine.AnimaShadersManager_LoadShader(self, *args)

    def CreateShader(self, *args):
        return _AnimaEngine.AnimaShadersManager_CreateShader(self, *args)

    def CreateProgram(self, *args):
        return _AnimaEngine.AnimaShadersManager_CreateProgram(self, *args)

    def GetProgram(self, index):
        return _AnimaEngine.AnimaShadersManager_GetProgram(self, index)

    def GetProgramFromName(self, *args):
        return _AnimaEngine.AnimaShadersManager_GetProgramFromName(self, *args)

    def SetActiveProgram(self, program):
        return _AnimaEngine.AnimaShadersManager_SetActiveProgram(self, program)

    def SetActiveProgramFromName(self, *args):
        return _AnimaEngine.AnimaShadersManager_SetActiveProgramFromName(self, *args)

    def GetActiveProgram(self):
        return _AnimaEngine.AnimaShadersManager_GetActiveProgram(self)
AnimaShadersManager_swigregister = _AnimaEngine.AnimaShadersManager_swigregister
AnimaShadersManager_swigregister(AnimaShadersManager)

class AnimaMeshesManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaMeshesManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaMeshesManager, name)
    __repr__ = _swig_repr

    def __init__(self, scene, materialsManager):
        this = _AnimaEngine.new_AnimaMeshesManager(scene, materialsManager)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaMeshesManager
    __del__ = lambda self: None

    def LoadMeshesFromModel(self, scene, modelName, materialNamesMap):
        return _AnimaEngine.AnimaMeshesManager_LoadMeshesFromModel(self, scene, modelName, materialNamesMap)

    def GetLastMeshesIndexMap(self):
        return _AnimaEngine.AnimaMeshesManager_GetLastMeshesIndexMap(self)

    def GetLastMeshesBonesInfo(self):
        return _AnimaEngine.AnimaMeshesManager_GetLastMeshesBonesInfo(self)

    def ClearLastMeshesIndexMap(self):
        return _AnimaEngine.AnimaMeshesManager_ClearLastMeshesIndexMap(self)

    def ClearLastMeshesBonesData(self):
        return _AnimaEngine.AnimaMeshesManager_ClearLastMeshesBonesData(self)

    def GetMesh(self, index):
        return _AnimaEngine.AnimaMeshesManager_GetMesh(self, index)

    def GetMeshFromName(self, *args):
        return _AnimaEngine.AnimaMeshesManager_GetMeshFromName(self, *args)

    def GetMeshesCount(self):
        return _AnimaEngine.AnimaMeshesManager_GetMeshesCount(self)
AnimaMeshesManager_swigregister = _AnimaEngine.AnimaMeshesManager_swigregister
AnimaMeshesManager_swigregister(AnimaMeshesManager)

class AnimaModelsManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaModelsManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaModelsManager, name)
    __repr__ = _swig_repr

    def __init__(self, scene, meshesManager, materialsManager, animationsManager):
        this = _AnimaEngine.new_AnimaModelsManager(scene, meshesManager, materialsManager, animationsManager)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaModelsManager
    __del__ = lambda self: None

    def LoadModel(self, *args):
        return _AnimaEngine.AnimaModelsManager_LoadModel(self, *args)

    def CreateModel(self, *args):
        return _AnimaEngine.AnimaModelsManager_CreateModel(self, *args)

    def GetModelsNumber(self):
        return _AnimaEngine.AnimaModelsManager_GetModelsNumber(self)

    def GetModel(self, index):
        return _AnimaEngine.AnimaModelsManager_GetModel(self, index)

    def GetModelFromName(self, *args):
        return _AnimaEngine.AnimaModelsManager_GetModelFromName(self, *args)

    def ClearModels(self):
        return _AnimaEngine.AnimaModelsManager_ClearModels(self)
AnimaModelsManager_swigregister = _AnimaEngine.AnimaModelsManager_swigregister
AnimaModelsManager_swigregister(AnimaModelsManager)

class AnimaMeshInstancesManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaMeshInstancesManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaMeshInstancesManager, name)
    __repr__ = _swig_repr

    def __init__(self, scene, meshesManager):
        this = _AnimaEngine.new_AnimaMeshInstancesManager(scene, meshesManager)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaMeshInstancesManager
    __del__ = lambda self: None

    def CreateInstance(self, *args):
        return _AnimaEngine.AnimaMeshInstancesManager_CreateInstance(self, *args)

    def CreateInstances(self, srcModel):
        return _AnimaEngine.AnimaMeshInstancesManager_CreateInstances(self, srcModel)

    def GetMeshInstancesNumber(self):
        return _AnimaEngine.AnimaMeshInstancesManager_GetMeshInstancesNumber(self)

    def GetMeshInstance(self, index):
        return _AnimaEngine.AnimaMeshInstancesManager_GetMeshInstance(self, index)

    def GetMeshInstanceFromName(self, *args):
        return _AnimaEngine.AnimaMeshInstancesManager_GetMeshInstanceFromName(self, *args)

    def ClearInstances(self):
        return _AnimaEngine.AnimaMeshInstancesManager_ClearInstances(self)

    def ClearLastInstancesFromModel(self):
        return _AnimaEngine.AnimaMeshInstancesManager_ClearLastInstancesFromModel(self)
AnimaMeshInstancesManager_swigregister = _AnimaEngine.AnimaMeshInstancesManager_swigregister
AnimaMeshInstancesManager_swigregister(AnimaMeshInstancesManager)

class AnimaModelInstancesManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaModelInstancesManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaModelInstancesManager, name)
    __repr__ = _swig_repr

    def __init__(self, scene, modelsManager, meshInstancesManager):
        this = _AnimaEngine.new_AnimaModelInstancesManager(scene, modelsManager, meshInstancesManager)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaModelInstancesManager
    __del__ = lambda self: None

    def CreateInstance(self, *args):
        return _AnimaEngine.AnimaModelInstancesManager_CreateInstance(self, *args)

    def GetModelInstancesNumber(self):
        return _AnimaEngine.AnimaModelInstancesManager_GetModelInstancesNumber(self)

    def GetModelInstance(self, index):
        return _AnimaEngine.AnimaModelInstancesManager_GetModelInstance(self, index)

    def GetModelInstanceFromName(self, *args):
        return _AnimaEngine.AnimaModelInstancesManager_GetModelInstanceFromName(self, *args)

    def ClearInstances(self):
        return _AnimaEngine.AnimaModelInstancesManager_ClearInstances(self)
AnimaModelInstancesManager_swigregister = _AnimaEngine.AnimaModelInstancesManager_swigregister
AnimaModelInstancesManager_swigregister(AnimaModelInstancesManager)

class AnimaAnimationsManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaAnimationsManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaAnimationsManager, name)
    __repr__ = _swig_repr

    def __init__(self, scene):
        this = _AnimaEngine.new_AnimaAnimationsManager(scene)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaAnimationsManager
    __del__ = lambda self: None

    def LoadAnimations(self, scene):
        return _AnimaEngine.AnimaAnimationsManager_LoadAnimations(self, scene)

    def GetAnimationsNumber(self):
        return _AnimaEngine.AnimaAnimationsManager_GetAnimationsNumber(self)

    def GetAnimation(self, index):
        return _AnimaEngine.AnimaAnimationsManager_GetAnimation(self, index)

    def GetAnimationFromName(self, *args):
        return _AnimaEngine.AnimaAnimationsManager_GetAnimationFromName(self, *args)

    def GetLastLoadedAnimations(self):
        return _AnimaEngine.AnimaAnimationsManager_GetLastLoadedAnimations(self)

    def ClearAnimations(self):
        return _AnimaEngine.AnimaAnimationsManager_ClearAnimations(self)

    def ClearLastLoadedAnimations(self):
        return _AnimaEngine.AnimaAnimationsManager_ClearLastLoadedAnimations(self)
AnimaAnimationsManager_swigregister = _AnimaEngine.AnimaAnimationsManager_swigregister
AnimaAnimationsManager_swigregister(AnimaAnimationsManager)

class AnimaScenesManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaScenesManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaScenesManager, name)
    __repr__ = _swig_repr

    def __init__(self, engine):
        this = _AnimaEngine.new_AnimaScenesManager(engine)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaScenesManager
    __del__ = lambda self: None

    def CreateScene(self, *args):
        return _AnimaEngine.AnimaScenesManager_CreateScene(self, *args)

    def GetScene(self, *args):
        return _AnimaEngine.AnimaScenesManager_GetScene(self, *args)
AnimaScenesManager_swigregister = _AnimaEngine.AnimaScenesManager_swigregister
AnimaScenesManager_swigregister(AnimaScenesManager)

class AnimaPrimitiveData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaPrimitiveData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaPrimitiveData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaPrimitiveData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaPrimitiveData
    __del__ = lambda self: None

    def SetVertices(self, vertices):
        return _AnimaEngine.AnimaPrimitiveData_SetVertices(self, vertices)

    def GetVertices(self):
        return _AnimaEngine.AnimaPrimitiveData_GetVertices(self)

    def SetIndices(self, indices):
        return _AnimaEngine.AnimaPrimitiveData_SetIndices(self, indices)

    def GetIndices(self):
        return _AnimaEngine.AnimaPrimitiveData_GetIndices(self)

    def SetColor(self, color):
        return _AnimaEngine.AnimaPrimitiveData_SetColor(self, color)

    def GetColor(self):
        return _AnimaEngine.AnimaPrimitiveData_GetColor(self)

    def SetType(self, type):
        return _AnimaEngine.AnimaPrimitiveData_SetType(self, type)

    def GetType(self):
        return _AnimaEngine.AnimaPrimitiveData_GetType(self)

    def SetModelMatrix(self, modelMatrix):
        return _AnimaEngine.AnimaPrimitiveData_SetModelMatrix(self, modelMatrix)

    def GetModelMatrix(self):
        return _AnimaEngine.AnimaPrimitiveData_GetModelMatrix(self)
AnimaPrimitiveData_swigregister = _AnimaEngine.AnimaPrimitiveData_swigregister
AnimaPrimitiveData_swigregister(AnimaPrimitiveData)

class AnimaRenderer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimaRenderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimaRenderer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AnimaEngine.new_AnimaRenderer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _AnimaEngine.delete_AnimaRenderer
    __del__ = lambda self: None

    def Start(self, scene):
        return _AnimaEngine.AnimaRenderer_Start(self, scene)

    def DrawAll(self):
        return _AnimaEngine.AnimaRenderer_DrawAll(self)

    def DrawMesh(self, *args):
        return _AnimaEngine.AnimaRenderer_DrawMesh(self, *args)

    def DrawModel(self, *args):
        return _AnimaEngine.AnimaRenderer_DrawModel(self, *args)

    def AddPrimitive(self, vertices, indices, color, modelMatrix, primitiveType):
        return _AnimaEngine.AnimaRenderer_AddPrimitive(self, vertices, indices, color, modelMatrix, primitiveType)

    def UpdateModelsVisibility(self):
        return _AnimaEngine.AnimaRenderer_UpdateModelsVisibility(self)

    def InitTextureSlots(self):
        return _AnimaEngine.AnimaRenderer_InitTextureSlots(self)

    def InitRenderingTargets(self, screenWidth, screenHeight):
        return _AnimaEngine.AnimaRenderer_InitRenderingTargets(self, screenWidth, screenHeight)

    def InitRenderingUtilities(self, screenWidth, screenHeight):
        return _AnimaEngine.AnimaRenderer_InitRenderingUtilities(self, screenWidth, screenHeight)

    def GetTextureSlot(self, *args):
        return _AnimaEngine.AnimaRenderer_GetTextureSlot(self, *args)

    def GetTexture(self, *args):
        return _AnimaEngine.AnimaRenderer_GetTexture(self, *args)

    def GetGBuffer(self, *args):
        return _AnimaEngine.AnimaRenderer_GetGBuffer(self, *args)

    def GetColor3f(self, *args):
        return _AnimaEngine.AnimaRenderer_GetColor3f(self, *args)

    def GetColor4f(self, *args):
        return _AnimaEngine.AnimaRenderer_GetColor4f(self, *args)

    def GetVector2f(self, *args):
        return _AnimaEngine.AnimaRenderer_GetVector2f(self, *args)

    def GetVector3f(self, *args):
        return _AnimaEngine.AnimaRenderer_GetVector3f(self, *args)

    def GetVector4f(self, *args):
        return _AnimaEngine.AnimaRenderer_GetVector4f(self, *args)

    def GetFloat(self, *args):
        return _AnimaEngine.AnimaRenderer_GetFloat(self, *args)

    def GetInteger(self, *args):
        return _AnimaEngine.AnimaRenderer_GetInteger(self, *args)

    def GetBoolean(self, *args):
        return _AnimaEngine.AnimaRenderer_GetBoolean(self, *args)
AnimaRenderer_swigregister = _AnimaEngine.AnimaRenderer_swigregister
AnimaRenderer_swigregister(AnimaRenderer)

# This file is compatible with both classic and new-style classes.


